@page "{UserId}/{OrganizationId}/{ProductId}"
@model UserProductModel
@{
    ViewData["Title"] = "User Product ";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>User Product</h2></div>
        <div class="card-body">Authorize the product <b>{{root.model.productName}}</b> for the user <b>{{root.model.userName}}</b> </div>
    </div>
    <br />
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" ba-if="root.model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>


    <ul class="nav">
        <li class="nav-item">
            <a asp-area="Identity" asp-page="/IAM/User" asp-route-id="@Model.UserId" role="button" class="btn btn-sm btn-outline-secondary" style="margin:10px"><span class="far fa-hand-point-left" style="font-size:large"></span> Back</a>
        </li>
    </ul>


    <br />


    <div style="margin-left:10px">
        <ul class="nav">
            <li class="nav-item">
                <button class="btn btn-sm btn-secondary" ba-click="addRoleAuth()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
            </li>
            <li class="nav-item">
                <h5>Roles</h5>
            </li>
        </ul>
        <p><i>By adding roles the user will be granted access to the product according to the role</i></p>
    </div>
    <br />
    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:30%">Name</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.roleAuthorizations">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="removeAuthorizationItem()" title="Remove"><i class="fa fa-trash"></i></div></td>
                <td>{{item.authorizationName}}</td>
            </tr>
        </tbody>
    </table>

    <hr />
    <br />

    <div style="margin-left:10px">
        <ul class="nav">
            <li class="nav-item">
                <button class="btn btn-sm btn-secondary" ba-click="addSystemAuth()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
            </li>
            <li class="nav-item">
                <h5>System Permission</h5>
            </li>
        </ul>
        <p><i>By adding system-permissions the user will be granted access to all applications in a system in the product</i></p>
    </div>
    <br />
    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:30%">Name</th>
                <th style="width:30%">Status</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.systemAuthorizations">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="removeAuthorizationItem()" title="Remove"><i class="fa fa-trash"></i></div></td>
                <td>{{item.authorizationName}}</td>
                <td><span ba-if="item.denyAuthorization">Denied</span><span ba-if="!item.denyAuthorization">Authorized</span></td>

            </tr>
        </tbody>
    </table>

    <hr />
    <br />

    <div style="margin-left:10px">
        <ul class="nav">
            <li class="nav-item">
                <button class="btn btn-sm btn-secondary" ba-click="addApplicationAuth()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
            </li>
            <li class="nav-item">
                <h5>Application Permission</h5>
            </li>
        </ul>
        <p><i>By adding application-permissions the user will be granted access to applications in the product</i></p>
    </div>
    <br />
    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:30%">Name</th>
                <th style="width:30%">Status</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.applicationAuthorizations">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="removeAuthorizationItem()" title="Remove"><i class="fa fa-trash"></i></div></td>
                <td>{{item.authorizationName}}</td>
                <td><span ba-if="item.denyAuthorization">Denied</span><span ba-if="!item.denyAuthorization">Authorized</span></td>
            </tr>
        </tbody>
    </table>

    <hr />
    <br />

    <div style="margin-left:10px">
        <ul class="nav">
            <li class="nav-item">
                <button class="btn btn-sm btn-secondary" ba-click="addViewAuth()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
            </li>
            <li class="nav-item">
                <h5>View Permission</h5>
            </li>
        </ul>
        <p><i>By adding application-view permissions the user will be granted access to views in the product</i></p>
    </div>

    <br />

    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:30%">Name</th>
                <th style="width:30%">Status</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.viewAuthorizations">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="removeAuthorizationItem()" title="Remove"><i class="fa fa-trash"></i></div></td>
                <td>{{item.authorizationName}}</td>
                <td><span ba-if="item.denyAuthorization">Denied</span><span ba-if="!item.denyAuthorization">Authorized</span></td>
            </tr>
        </tbody>
    </table>

    <hr />
   
    <div class="modal fade" id="addAuthorizationModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Authorize {{root.authorization.authorizationItemTypeName}}</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group" ba-show="root.authorization.authorizationType=='ROLE'">
                        <label class="control-label">Select Role<span style="color: red"> *</span></label>
                        <select ba-bind="root.authorization.authorizationId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.authitem.roleItems" ba-option-id="item.id" ba-option-text="item.name"></option>
                        </select>
                    </div>
                    <div class="form-group" ba-show="root.authorization.authorizationType=='SYSTEM'">
                        <label class="control-label">Select System<span style="color: red"> *</span></label>
                        <select ba-bind="root.authorization.authorizationId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.authitem.systemItems" ba-option-id="item.id" ba-option-text="item.name"></option>
                        </select>
                        <input type="checkbox" ba-bind="root.authorization.denyAuthorization" /> Deny

                    </div>
                    <div class="form-group" ba-show="root.authorization.authorizationType=='APPLICATION'">
                        <label class="control-label">Select Application<span style="color: red"> *</span></label>
                        <select ba-bind="root.authorization.authorizationId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.authitem.applicationItems" ba-option-id="item.id" ba-option-text="item.name"></option>
                        </select>
                        <input type="checkbox" ba-bind="root.authorization.denyAuthorization" /> Deny
                    </div>
                    <div class="form-group" ba-show="root.authorization.authorizationType=='UIVIEW'">
                        <label class="control-label">Select View<span style="color: red"> *</span></label>
                        <select ba-bind="root.authorization.authorizationId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.authitem.viewItems" ba-option-id="item.id" ba-option-text="item.name"></option>
                        </select>
                        <input type="checkbox" ba-bind="root.authorization.denyAuthorization" /> Deny
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button id="addAuthorizationModalOkBtn" type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal" ba-show="root.authorization.authorizationId">Ok</button>
                </div>
            </div>
        </div>
    </div>

    {{root.authorization.authorizationId}}

    <br />
    <br />

    {{root.authorization}}

</div>

@section Scripts
    {

         <script type="module">

        import { BareaApp } from '/js/barea_dev.js';

        const appcontent = {
            data:
            {
                model: {modelSaved:true, userName:"", productName:"", roleAuthorizations:[],systemAuthorizations:[],applicationAuthorizations:[],viewAuthorizations:[]},
                authorization: {authorizationType: "", authorizationId: "", authorizationItemTypeName: "", userId: "", organizationId: 0, productId: "" },
                authitem: {roleItems:[],systemItems:[],applicationItems:[],viewItems:[]}
            },
            methods: 
            {


                removeAuthorizationItem: async function (a,b,item) 
                {
                    let baseurl = '@Url.Content("~/Identity/IAM/")';
                    let endpointurl = baseurl + "UserProduct/@Model.UserId/@Model.OrganizationId/@Model.ProductId?handler=RemoveAuthorization";
                    let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    try {
                        const response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(item)
                        });

                        if (!response.ok) {
                            throw await response.json();
                        }

                        clientdata.model = await response.json();
                      
                    } 
                    catch (error) 
                    {
                        //raiseErrorModal(error);
                    }

                },
                addRoleAuth: function () {


                    clientdata.authorization.authorizationType = "ROLE";
                    clientdata.authorization.authorizationItemTypeName = "Role";
                    clientdata.authorization.authorizationId = "";

                  
                    let okfunc = async function () {

                        clientdata.authorization.userId = "@Model.UserId";
                        clientdata.authorization.organizationId = @Model.OrganizationId;
                        clientdata.authorization.productId = "@Model.ProductId";

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserProduct/@Model.UserId/@Model.OrganizationId/@Model.ProductId?handler=AddRoleAuthorization";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        const response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.authorization)
                        });

                        if (!response.ok) {
                            throw await response.json();
                        }

                        let newmodel =  await response.json();
                        clientdata.model = newmodel;
                    }

                    raiseAddAuthorizationModal(okfunc);
                },
                addSystemAuth: function () 
                {
                    clientdata.authorization.authorizationType = "SYSTEM";
                    clientdata.authorization.authorizationItemTypeName = "System";
                    clientdata.authorization.authorizationId = "";

                    let okfunc = async function () {

                        clientdata.authorization.userId = "@Model.UserId";
                        clientdata.authorization.organizationId = @Model.OrganizationId;
                        clientdata.authorization.productId = "@Model.ProductId";

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserProduct/@Model.UserId/@Model.OrganizationId/@Model.ProductId?handler=AddSystemAuthorization";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';


                        const response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.authorization)
                        });

                        if (!response.ok) {
                            throw await response.json();
                        }


                         let newmodel =  await response.json();
                        clientdata.model = newmodel;
                        
                    }

                    raiseAddAuthorizationModal(okfunc);
                },
                addApplicationAuth: function () 
                {

                    clientdata.authorization.authorizationType = "APPLICATION";
                    clientdata.authorization.authorizationItemTypeName = "Application";
                    clientdata.authorization.authorizationId = "";

                    let okfunc = async function () 
                    {
                        clientdata.authorization.userId = "@Model.UserId";
                        clientdata.authorization.organizationId = @Model.OrganizationId;
                        clientdata.authorization.productId = "@Model.ProductId";

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserProduct/@Model.UserId/@Model.OrganizationId/@Model.ProductId?handler=AddApplicationAuthorization";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        const response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.authorization)
                        });

                        if (!response.ok) {
                            throw await response.json();
                        }


                       let newmodel =  await response.json();
                        clientdata.model = newmodel;
                        
                    }

                    raiseAddAuthorizationModal(okfunc);

                },
                addViewAuth: function () 
                {

                    clientdata.authorization.authorizationType = "UIVIEW";
                    clientdata.authorization.authorizationItemTypeName = "View";
                    clientdata.authorization.authorizationId = "";

                    let okfunc = async function () 
                    {
                        clientdata.authorization.userId = "@Model.UserId";
                        clientdata.authorization.organizationId = @Model.OrganizationId;
                        clientdata.authorization.productId = "@Model.ProductId";

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "OrganizationProduct/@Model.OrganizationId/@Model.ProductId?handler=AddViewAuthorization";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        const response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.authorization)
                        });

                        if (!response.ok) {
                            throw await response.json();
                        }


                        let newmodel =  await response.json();
                        clientdata.model = newmodel;
                    }

                    raiseAddAuthorizationModal(okfunc);

                }
                
            },
            computed:{},
            mounted: async function (applicationData) {
                let baseurl = '@Url.Content("~/Identity/IAM/")';
                let userId = '@Model.UserId';
                let orgId = '@Model.OrganizationId';
                let productId = '@Model.ProductId';

                let endpointUserProduct = `${baseurl}UserProduct/${userId}/${orgId}/${productId}?handler=Load`;
                let endpointAuthItems = `${baseurl}UserProduct/${userId}/${orgId}/${productId}?handler=LoadAuthItems`;

                try {
                    let response1 = await fetch(endpointUserProduct);
                    let data1 = await response1.json();
                    applicationData.model = data1;

                    let response2 = await fetch(endpointAuthItems);
                    let data2 = await response2.json();
                    applicationData.authitem = data2;
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }

        };

        const app = new BareaApp();
        let clientdata = await app.mount("app", appcontent);


        let raiseAddAuthorizationModal = function (callback) {
            let modal = new bootstrap.Modal(document.getElementById("addAuthorizationModal"));
            document.getElementById("addAuthorizationModalOkBtn").onclick = function () {
                modal.hide();
                if (typeof callback === "function") callback();
            };
            modal.show();
        }

    </script>


}

