@page "{Id}"
@model UserModel
@{
    ViewData["Title"] = "Edit User";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>User</h2></div>
        <div class="card-body">
            Manage the user <b>{{root.model.userName}}</b>
            <br />
            <br />
            <ul class="nav">
                <li class="nav-item">
                    <a asp-area="Identity" asp-page="/IAM/UserList" role="button" class="btn btn-sm btn-outline-secondary"><span class="far fa-hand-point-left" style="font-size:large"></span> Back to list</a>
                </li>
                <li class="nav-item">
                    <button class="btn btn-sm btn-outline-primary" type="button" ba-click="updateEntity()" style="margin-left:10px"><span class="fa fa-save" style="font-size:large"></span> Save</button>
                </li>
            </ul>
        </div>
    </div>

    <br />

    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" ba-if="root.model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>





    <br />

    <div class="row">
        <div class="col-lg-4">
            <div class="form-group">
                <label class="control-label">Email<span style="color: red"> *</span></label>
                <input id="tb_email" type="text" class="form-control form-control-sm" ba-bind="root.model.email" />
            </div>
            <div class="form-group">
                <label class="control-label">Phone</label>
                <input id="tb_phone" type="text" class="form-control form-control-sm" ba-bind="root.model.phoneNumber" />
            </div>
            <div class="form-group">
                <label class="control-label">First Name<span style="color: red"> *</span></label>
                <input id="tb_firstname" type="text" class="form-control form-control-sm" ba-bind="root.model.firstName" />
            </div>
            <div class="form-group">
                <label class="control-label">Last Name<span style="color: red"> *</span></label>
                <input id="tb_lastname" type="text" class="form-control form-control-sm" ba-bind="root.model.lastName" />
            </div>
            <div class="form-group">
                <label class="control-label">Legal ID</label>
                <input id="tb_legalid" type="text" class="form-control form-control-sm" ba-bind="root.model.legalIdNumber" />
            </div>
        </div>
        <div class="col-lg-4">
            <div class="form-group">
                <label class="control-label">Address</label>
                <input id="tb_address" type="text" class="form-control form-control-sm" ba-bind="root.model.address" />
            </div>
            <div class="form-group">
                <label class="control-label">Zip Code</label>
                <input id="tb_zipcode" type="text" class="form-control form-control-sm" ba-bind="root.model.zipCode" />
            </div>
            <div class="form-group">
                <label class="control-label">City</label>
                <input id="tb_city" type="text" class="form-control form-control-sm" ba-bind="root.model.city" />
            </div>
            <div class="form-group">
                <label class="control-label">Country</label>
                <input id="tb_country" type="text" class="form-control form-control-sm" ba-bind="root.model.country" />
            </div>
        </div>
        <div class="col-lg-4">
            <br />
            <div class="largecheckbox">
                <input id="cb_allowpublicprofile" type="checkbox" ba-bind="root.model.allowPublicProfile" /><label>Allow Public Profile</label>
            </div>

            <div class="largecheckbox">
                <input id="cb_allowemailnotification" type="checkbox" ba-bind="root.model.allowEmailNotifications" /><label>Allow Email Notifications</label>
            </div>

            <div class="largecheckbox">
                <input id="cb_allowsmsnotification" type="checkbox" ba-bind="root.model.allowSmsNotifications" /><label>Allow SMS Notifications</label>
            </div>
        </div>
    </div>

   

   
    <div class="form-group">
        <span>
            <b>API Key: </b><span>{{root.model.apiKey}}</span>
            <br />
            <br />
            <button class="btn btn-sm btn-outline-primary" type="button" ba-click="renewAPIKey()"> Create / Renew API Key</button>
        </span>
    </div>


    <br />
    <br />
    <h5>User Products</h5>
    <p><i>Products is added or removed from the user through organization membership</i></p>
    <table class="table table">
        <thead>
            <tr>

                <th style="width:5%"></th>
                <th style="width:25%">Organization</th>
                <th style="width:25%">Product</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.userProducts">
            <tr>

                <td><a role="button" class="btn btn-sm btn-secondary" ba-click="goToProduct()" title="Product Setup"><i class="fas fa-cogs"></i></a></td>
                <td>{{item.organizationName}}</td>
                <td>{{item.productName}}</td>

            </tr>
        </tbody>
    </table>
    <br />
    <br />
    
</div>

@section Scripts
 {

    <script type="module">

        import {BareaApp} from '/js/barea_dev.js';

        const appcontent = {
            data:
            {
                model: {userProducts:[]},
                users: [],
                idgen: -1
            },
            methods: {

                goToProduct : function(a,b,data){
                    let userid = "@Model.Id";
                    window.location.href=`/Identity/IAM/UserProduct/${userid}/${data.organizationId}/${data.productId}`;
                },
                updateEntity: async function (a)
                {
                    var baseurl = '@Url.Content("~/Identity/IAM/")';
                    var endpointurl = baseurl + "User/@Model.Id?handler=UpdateEntity";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(clientdata.model)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }


                            clientdata.model =  await response.json();
                            clientdata.model.modelSaved = true;
                            setTimeout(function () { clientdata.model.modelSaved = false; }, 3000);

                        } catch (error) {
                            //raiseErrorModal(error);
                        }

     
                },
                renewAPIKey: async function ()
                {
                    var baseurl = '@Url.Content("~/Identity/IAM/")';
                    var endpointurl = baseurl + "User/@Model.Id?handler=CreateAPIKey";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(clientdata.model)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }


                            clientdata.model = await response.json();
                            clientdata.model.modelSaved = true;
                            setTimeout(function () { clientdata.model.modelSaved = false; }, 3000);

                        } catch (error) {
                            //raiseErrorModal(error);
                        }

                }
               
            },
            computed:
            {
                example: function ()
                {
                }

            },
            mounted: function (applicationData)
            {
                let baseurl = '@Url.Content("~/Identity/IAM/")';
                let endpointurl = baseurl + "User/@Model.Id?handler=Load";
                const retval = fetch(endpointurl)
                    .then(response => response.json())
                    .then(data => {
                        applicationData.model = data;
                        return data;
                    })
                    .catch(error => console.error("Error fetching data:", error));

                return retval;
              
            }
        };

        const app = new BareaApp();
        let clientdata = app.mount("app", appcontent);

    </script>

}

