@page
@model UserListModel
@{
    ViewData["Title"] = "User administration";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Users</h2></div>
        <div class="card-body">
            Manage users.
            @if (!User.IsInRole(IntwentyRoles.RoleSuperAdmin))
            {
                <i>You have limited access to this function.</i>
            }
        </div>
    </div>

    <br />
    <br />

    <div>

        <div class="btn btn-sm btn-secondary" ba-click="addEntity()">
            <span class="fa fa-plus"></span>
        </div>
    </div>
    <br />
    <br />
    <table class="table table">
        <thead>
            <tr>
                <th style="width:5%"></th>
                <th style="width:5%"></th>
                <th style="width:15%">User Name</th>
                <th style="width:10%">IsBlocked</th>
                <th style="width:10%">MFA Active</th>
                <th style="width:15%">Last login</th>
                <th style="width:15%">Last login product</th>
                <th style="width:15%">Last login method</th>
                <th style="width:5%">Block</th>
                <th style="width:5%">Reset MFA</th>

            </tr>
        </thead>
        <tbody ba-foreach="entry in root.users">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="deleteEntity()" title=" Delete user"><i class="fa fa-trash"></i></div></td>
                <td><a role="button" class="btn btn-sm btn-secondary" ba-href="entry.editPath" title="Edit"><i class="fas fa-edit"></i></a></td>
                <td>{{entry.userName}}</td>
                <td>{{entry.isBlocked}}</td>
                <td>{{entry.mfaActive}}</td>
                <td>{{entry.lastLogin}}</td>
                <td>{{entry.lastLoginProduct}}</td>
                <td>{{entry.lastLoginMethod}}</td>
                <td ba-if="!entry.isBlocked"><div class="btn btn-sm btn-secondary" ba-click="blockUser()" title="Block"><i class="fas fa-lock"></i></div></td>
                <td ba-if="entry.isBlocked"><div class="btn btn-sm btn-secondary" ba-click="unblockUser()" title="Unblock"><i class="fas fa-lock-open"></i></div></td>
                <td ba-if="entry.mfaActive"><div class="btn btn-sm btn-secondary" ba-click="resetMFA()" title="Reset MFA"><i class="fas fa-key"></i></div></td>
                <td ba-if="!entry.mfaActive"></td>

            </tr>
        </tbody>
    </table>



    <div class="modal fade" id="addEntityModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (Settings.Value.AccountsUserNameGeneration == UserNameGenerationStyles.Input)
                    {
                        <div class="form-group">
                            <label class="control-label">User Name<span style="color: red"> *</span></label>
                            <input id="tb_username" type="text" class="form-control form-control-sm" ba-bind="root.model.userName" />
                        </div>
                    }
                    <div class="form-group">
                        <label class="control-label">Email<span style="color: red"> *</span></label>
                        <input id="tb_email" type="email" class="form-control form-control-sm" ba-bind="root.model.email" />
                    </div>
                    <div class="form-group">
                        <label class="control-label">First Name<span style="color: red"> *</span></label>
                        <input id="tb_firstname" type="text" class="form-control form-control-sm" ba-bind="root.model.firstName" />
                    </div>
                    <div class="form-group">
                        <label class="control-label">Last Name<span style="color: red"> *</span></label>
                        <input id="tb_lastname" type="text" class="form-control form-control-sm" ba-bind="root.model.lastName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="addEntityOkBtn">OK</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts
 {

    <script type="module">

        import {BareaApp} from '/js/barea_dev.js';

        const appcontent = {
            data:
            {
                model: {},
                users: [],
                idgen: -1
            },
            methods: {


                addEntity: function ()
                {
                    let okfunc = function ()
                    {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserList?handler=AddUser";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        fetch(endpointurl, {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": antiforgerytoken
                          },
                          body: JSON.stringify(clientdata.model)
                        })
                        .then(response => response.json())  
                        .then(data => {
                          clientdata.model = {};
                          clientdata.users = data;
                        })
                        .catch(error => {
                          console.error("Error:", error);
                        });
                    }

                    raiseAddUserModal(okfunc);

                },
                blockUser: function (a,b,entry)
                {

                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserList?handler=BlockUser";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.users = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Block user ?", "The user will be blocked, continue ?", yesfunc);


                },
                unblockUser: function (a,b, entry)
                {
                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserList?handler=UnBlockUser";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.users = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Unblock user ?", "The user will gain access again, continue ?", yesfunc);

                },
                resetMFA: function (a,b,entry)
                {
                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserList?handler=resetMfa";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.users = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Reset Twofactor Authentication ?", "Twofactor authentication will be removed from the user. The user can configure it again.", yesfunc);

                },
                deleteEntity: function (a,b,entry)
                {

                    let yesfunc = async function () 
                    {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "UserList?handler=DeleteEntity";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.users = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Delete user ?", "The user will be deleted, continue ?", yesfunc);
                }
            },
            computed:
            {
                example: function ()
                {

                }

            },
            mounted: function (applicationData)
            {
                let baseurl = '@Url.Content("~/Identity/IAM/")';
                let endpointurl = baseurl + "UserList?handler=Load";
                const retval = fetch(endpointurl)
                    .then(response => response.json()) 
                    .then(data => {
                        applicationData.users = data;
                        return data;
                    })
                    .catch(error => console.error("Error fetching data:", error));

                return retval;
            }
        };

        const app = new BareaApp();
        let clientdata = await app.mount("app", appcontent);


         let raiseAddUserModal = function(callback) {
            let modal = new bootstrap.Modal(document.getElementById("addEntityModal"));
            document.getElementById("addEntityOkBtn").onclick = function () {
                modal.hide();
                if (typeof callback === "function") callback();
            };
            modal.show();
        }

    </script>

}

