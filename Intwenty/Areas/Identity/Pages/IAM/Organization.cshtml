@page "{Id}"
@model OrganizationModel
@{
    ViewData["Title"] = "Edit Organization";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Organization</h2></div>
        <div class="card-body">
            Manage the organization <b>{{root.model.name}}.</b>
            @if (!User.IsInRole(IntwentyRoles.RoleSuperAdmin))
            {
                <i>You have limited access to this function.</i>
            }
            <br />
            <br />
            <ul class="nav">
                <li class="nav-item">
                    <a asp-area="Identity" asp-page="/IAM/OrganizationList" role="button" class="btn btn-sm btn-outline-secondary"><span class="far fa-hand-point-left" style="font-size:large"></span> Back to list</a>
                </li>
                <li class="nav-item">
                    <!-- button class="btn btn-sm btn-outline-primary" type="button" v-on:click="updateEntity()" style="margin-left:10px"><span class="fa fa-save" style="font-size:large"></span> Save</button    -->
                </li>
            </ul>
        </div>
    </div>
    <br />

    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" ba-if="root.model.modelSaved">
        <strong>Changes have been saved !</strong><br />
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-danger fade show" role="alert" ba-if="root.model.resultCode=='UNEXPECTED_ERROR'">
        An error occured !
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-danger fade show" role="alert" ba-if="root.model.resultCode=='MEMBER_HAS_PRODUCT_IN_OTHER_ORG'">
        User cant be added to this organization since it has a product that is used in another organization where the user is a member
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-danger fade show" role="alert" ba-if="root.model.resultCode=='PRODUCT_HAS_SAME_USER_IN_OTHER_ORG'">
        Product cant be added since it has members that is members in other organizations that use the same product
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <br />

    <div class="form-group">
        <label class="control-label">Name<span style="color: red"> *</span></label>
        <input id="tb_email" type="text" class="form-control form-control-sm" ba-bind="root.model.name" disabled />
    </div>

    <br />


    <div style="margin-left:10px">
        <ul class="nav">
            <li class="nav-item">
                <button class="btn btn-sm btn-secondary" ba-click="addMember()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
            </li>
            <li class="nav-item">
                <h5>Members</h5>
            </li>
        </ul>
    </div>
    <br />
    <table class="table table">
        <thead>
            <tr>

                <th style="width:5%"></th>
                <th style="width:30%">Name</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.model.members">
            <tr>
                <td><div class="btn btn-sm btn-danger" ba-click="removeMember()" title="Remove"><i class="fa fa-trash"></i></div></td>
                <td>{{item.userName}}</td>
            </tr>
        </tbody>
    </table>

    @if (User.IsInRole(IntwentyRoles.RoleSuperAdmin))
    {
        <hr />
        <br />

        <div style="margin-left:10px">
            <ul class="nav">
                <li class="nav-item">
                    <button class="btn btn-sm btn-secondary" ba-click="addProduct()" style="margin-right:10px"><span class="fa fa-plus"></span></button>
                </li>
                <li class="nav-item">
                    <h5>Products</h5>
                </li>
            </ul>
        </div>
        <br />
        <table class="table table">
            <thead>
                <tr>

                    <th style="width:5%"></th>
                    <th style="width:5%"></th>
                    <th style="width:30%">Id</th>
                    <th style="width:30%">Name</th>
                </tr>
            </thead>
            <tbody ba-foreach="item in root.model.products">
                <tr>
                    <td><div class="btn btn-sm btn-danger" ba-click="removeProduct()" title="Remove"><i class="fa fa-trash"></i></div></td>
                    <td><a role="button" class="btn btn-sm btn-secondary" ba-click="goToOrgProduct()" title="Product Setup"><i class="fas fa-cogs"></i></a></td>
                    <td>{{item.id}}</td>
                    <td>{{item.productName}}</td>
                </tr>
            </tbody>
        </table>
    }

    <hr />

  

    <div class="modal fade" id="addMemberModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Member</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label">Select User<span style="color: red"> *</span></label>
                       
                        <select ba-bind="root.member.userId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.users" ba-option-id="item.id" ba-option-text="item.userName"></option>
                        </select>

                         
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="addMemberOkBtn">OK</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="addProductModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Product</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="form-group">
                        <label class="control-label">Select Product<span style="color: red"> *</span></label>
                        <select ba-bind="root.product.productId" class="form-control form-control-sm">
                            <option ba-foreach="item in root.products" ba-option-id="item.id" ba-option-text="item.productName"></option>
                        </select>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button id="addProductOkBtn" type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Ok</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts
{
        <script type="module">

        import {BareaApp} from '/lib/barea/barea.js';

        const appcontent = {
            data:
            {
                member: {},
                product: {},
                model: { members: [], products:[] },
                users: [],
                products: []
            },
            methods: {

                goToOrgProduct: function(a,b,data) 
                {
                    let orgproduct = "@Model.Id";
                    window.location.href = `/Identity/IAM/OrganizationProduct/${orgproduct}/${data.productId}`;
                },
                updateEntity: async function ()
                {
                    let context = this;
                    let baseurl = '@Url.Content("~/Identity/IAM/")';
                    let endpointurl = baseurl + "Organization/@Model.Id?handler=UpdateEntity";
                    let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(clientdata.model)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }


                            clientdata.model =  await response.json();
                            clientdata.model.modelSaved = true;
                            setTimeout(function () { clientdata.model.modelSaved = false; }, 3000);

                        } catch (error) {
                            //raiseErrorModal(error);
                        }

     
                },
                addMember: function () 
                {


                    clientdata.resultCode = "";
                    let organizationId=@Model.Id;

                    let okfunc = async function () {
                        clientdata.member.organizationId= organizationId;
                        clientdata.member.id=0;

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "Organization/@Model.Id?handler=AddMember";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(clientdata.member)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }


                            clientdata.model = await response.json();
              

                        } catch (error) {
                            //raiseErrorModal(error);
                        }
                    }

                    raiseAddMemberModal(okfunc);

                },
                removeMember: function (a, b, entry) {

                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "Organization/@Model.Id?handler=RemoveMember";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.model = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Remove member ?", "The user will be removed from the organization, continue ?", yesfunc);
                },
                addProduct: function () {


                    clientdata.resultCode = "";
                    let organizationId = @Model.Id;
                    
                    let okfunc = async function () {
                        let productId = clientdata.product.productId;
                        clientdata.product = clientdata.products.find(p=>p.id===productId);
                        clientdata.product.organizationId= organizationId;
                        clientdata.product.id=0;
                        clientdata.product.productId=productId;

                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "Organization/@Model.Id?handler=AddProduct";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(clientdata.product)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }


                            clientdata.model = await response.json();


                        } catch (error) {
                            //raiseErrorModal(error);
                        }
                    }

                    raiseAddProductModal(okfunc);

                },
                removeProduct: function (a, b, entry) {

                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "Organization/@Model.Id?handler=RemoveProduct";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.model = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Remove from Organization ?", "The product will be removed from the organization, continue ?", yesfunc);
                }
              
               
            },
            computed:
            {
                example: function ()
                {
                }

            },
            mounted: async function (applicationData) {

                try {
                    let baseurl = '@Url.Content("~/Identity/IAM/")';
                    let orgId = '@Model.Id';

                    const fetchData = async (handler) => {
                        let endpointurl = `${baseurl}Organization/${orgId}?handler=${handler}`;
                        let response = await fetch(endpointurl);
                        if (!response.ok) throw new Error(`Failed to fetch ${handler}`);
                        return await response.json();
                    };

                    applicationData.model = await fetchData("Load");
                    applicationData.users = await fetchData("LoadUsers");
                    applicationData.products = await fetchData("LoadProducts");
                } catch (error) {
                    console.error("Error fetching data:", error);
                }

                return true;
            }
        };

        const app = new BareaApp();
        let clientdata = await app.mount("app", appcontent);


        let raiseAddMemberModal = function (callback) {
            let modal = new bootstrap.Modal(document.getElementById("addMemberModal"));
            document.getElementById("addMemberOkBtn").onclick = function () {
                modal.hide();
                if (typeof callback === "function") callback();
            };
            modal.show();
        }

        let raiseAddProductModal = function (callback) {
            let modal = new bootstrap.Modal(document.getElementById("addProductModal"));
            document.getElementById("addProductOkBtn").onclick = function () {
                modal.hide();
                if (typeof callback === "function") callback();
            };
            modal.show();
        }

    </script>

   
}

