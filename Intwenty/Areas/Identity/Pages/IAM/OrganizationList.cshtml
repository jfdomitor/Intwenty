@page
@model OrganizationListModel
@{
    ViewData["Title"] = "Organizations";
}

@await Html.PartialAsync("_Modals")


<div id="app">

    <br />
    <br />
    <div class="card">
        <div class="card-header"><h2>Organizations</h2></div>
        <div class="card-body">
            Manage user organizations. 
            @if (!User.IsInRole(IntwentyRoles.RoleSuperAdmin))
            { 
                <i>You have limited access to this function.</i>
            }
        </div>
    </div>

    <br />
    <br />

    <div>

       @if (User.IsInRole(IntwentyRoles.RoleSuperAdmin))
       {
        <div class="btn btn-sm btn-secondary" ba-click="addEntity()">
            <span class="fa fa-plus"></span>
        </div>
       }
    </div>
    <br />
    <br />
    <table class="table table">
        <thead>
            <tr>

                <th style="width:5%"></th>
                <th style="width:5%"></th>
                <th style="width:25%">Id</th>
                <th style="width:15%">Name</th>
            </tr>
        </thead>
        <tbody ba-foreach="item in root.list">
            <tr>
                <td>
                    @if (User.IsInRole(IntwentyRoles.RoleSuperAdmin))
                    {
                        <div class="btn btn-sm btn-danger" ba-click="deleteEntity()" title=" Delete"><i class="fa fa-trash"></i></div>
                    }
                </td>
                <td><a role="button" class="btn btn-sm btn-secondary" ba-click="goToOrg()" title="Edit"><i class="fas fa-edit"></i></a></td>
                <td>{{item.id}}</td>
                <td>{{item.name}}</td>

            </tr>
        </tbody>
    </table>

   

    <div class="modal fade" id="addEntityModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Organization</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label">Name<span style="color: red"> *</span></label>
                        <input id="tb_firstname" type="text" class="form-control form-control-sm" ba-bind="root.model.name" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="addEntityOkBtn">OK</button>
                </div>
            </div>
        </div>
    </div>


</div>

@section Scripts
    {

    <script type="module">

        import { BareaApp } from '/js/barea_dev.js';

        const appcontent = {
            data:
            {
                model: {},
                list: [],
                idgen: -1
            },
            methods: {

                goToOrg: function (a,b,data) {
                    
                    window.location.href = `/Identity/IAM/Organization/${data.id}`;
                  
                },
                addEntity: function () {
                    let okfunc = function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "OrganizationList?handler=AddEntity";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.model)
                        })
                            .then(response => response.json())
                            .then(data => {
                                clientdata.model = {};
                                clientdata.list = data;
                            })
                            .catch(error => {
                                console.error("Error:", error);
                            });
                    }

                    raiseOrgModal(okfunc);

                },
                deleteEntity: function (a, b, entry) {

                    let yesfunc = async function () {
                        let baseurl = '@Url.Content("~/Identity/IAM/")';
                        let endpointurl = baseurl + "OrganizationList?handler=DeleteEntity";
                        let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                        try {
                            const response = await fetch(endpointurl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "RequestVerificationToken": antiforgerytoken
                                },
                                body: JSON.stringify(entry)
                            });

                            if (!response.ok) {
                                throw await response.json();
                            }

                            clientdata.users = await response.json();
                        } catch (error) {
                            raiseErrorModal(error);
                        }
                    };

                    raiseYesNoModal("Delete Organization ?", "No users will be deleted, continue ?", yesfunc);
                }
            },
            computed:
            {
                example: function () {

                }

            },
            mounted: function (applicationData) {
                let baseurl = '@Url.Content("~/Identity/IAM/")';
                let endpointurl = baseurl + "OrganizationList?handler=Load";
                const retval = fetch(endpointurl)
                    .then(response => response.json())
                    .then(data => {
                        applicationData.list = data;
                        return data;
                    })
                    .catch(error => console.error("Error fetching data:", error));

                return retval;

            }
        };

        const app = new BareaApp();
        let clientdata = app.mount("app", appcontent);


        let raiseOrgModal = function (callback) {
            let modal = new bootstrap.Modal(document.getElementById("addEntityModal"));
            document.getElementById("addEntityOkBtn").onclick = function () {
                modal.hide();
                if (typeof callback === "function") callback();
            };
            modal.show();
        }

    </script>

   

}

