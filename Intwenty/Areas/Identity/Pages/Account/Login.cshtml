@page
@model LoginModel
@using Microsoft.Extensions.Options
@using Intwenty.Model
@{
    ViewData["Title"] = Localizer["Log In"].Value;
}



<partial name="_LoginHeader" model="Model" />


<div class="row" id="app">

    @if (HttpContext.Request.Query.ContainsKey(Settings.Value.AccountsEmergencyLoginQueryKey))
    {
        <partial name="_LoginLocal" model="Model" />

    }
    else
    {

        if (Settings.Value.UseBankIdLogin)
        {
            <partial name="_LoginBankId" model="Model" />

        }
        else if (Settings.Value.UseFrejaEIdLogin)
        {

            <partial name="_LoginFreja" model="Model" />
        }
        else
        {

            if (Settings.Value.UseLocalLogins)
            {
                <partial name="_LoginLocal" model="Model" />
            }


            if (Settings.Value.UseExternalLogins)
            {
                <partial name="_LoginExternal" model="Model" />
            }
        }

    }

</div>



@section Scripts
 {

    <script>

        let app = getBareaApp(false);

        app.addMountedHandler(function (data) {
            @if (Settings.Value.UseFrejaEIdLogin)
            {
                <text>
                       this.startFreja();
                </text>
            }
            @if (Settings.Value.UseBankIdLogin && Settings.Value.BankIdUsage == BankIdUsageTypes.OtherDevice)
            {
                <text>
                       this.startBankId('BANKID_START_OTHER');
                </text>
            }
        });


        app.addHandler("localLogin", function (event, element) 
        {
            var context = this.getData();
            var baseurl = '@Url.Content("~/Identity/Account/")';
            var endpointurl = baseurl + "Login?handler=LocalLogin";
            var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

            fetch(endpointurl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": antiforgerytoken
                },
                body: JSON.stringify(context.model)
            })
                .then(response => response.json())
                .then(data => {

                    if (data.resultCode==='SUCCESS') {
                        window.location = data.returnUrl;
                    } else {
                        context.model = data;
                        if (context.model.resultCode === "LOCKEDOUT" || context.model.resultCode === "REQUIREMFA") {
                            window.location = context.model.redirectUrl;
                        }
                    }
                })
                .catch(error => console.error("Error:", error));
        });




        BareaApp.prototype.startBankId = function (method) {
            var context = this.getData();
            var baseurl = '@Url.Content("~/Identity/Account/")';
            var endpointurl = baseurl + "Login?handler=StartBankId";
            var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

            context.model.actionCode = method;

            // Prepare the request options
            var requestOptions = {
                method: "POST",  // Use POST method
                headers: {
                    "Content-Type": "application/json",  // Set content type as JSON
                    "RequestVerificationToken": antiforgerytoken  // Add antiforgery token in the headers
                },
                body: JSON.stringify(context.model)  // Convert model to JSON string
            };

            // Use fetch to send the request
            fetch(endpointurl, requestOptions)
                .then(response => response.json())  // Parse the response as JSON
                .then(response => {
                    context.model = response;
                    if (context.model.resultCode === "BANKID_AUTH_QR") {
                        setTimeout(function () {
                            context.authenticateBankId();
                        }, 500);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);  // Log any error that occurs
                    context.model = { error: error.message };  // Store the error in the model
                });
        }

        BareaApp.prototype.authenticateBankId = function() {
            var context = this.getData();
            var baseurl = '@Url.Content("~/Identity/Account/")';
            var endpointurl = baseurl + "Login?handler=AuthenticateBankId";
            var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

            context.model.actionCode = "WAIT_FOR_BANKID_AUTH";

            // Prepare request options
            var requestOptions = {
                method: "POST", // Using POST request
                headers: {
                    "Content-Type": "application/json", // JSON request
                    "RequestVerificationToken": antiforgerytoken // Security token
                },
                body: JSON.stringify(context.model) // Convert model to JSON
            };

            // Send the request
            fetch(endpointurl, requestOptions)
                .then(response => response.json()) // Parse response as JSON
                .then(response => {
                    // Redirect if successful
                    window.location = response.returnUrl;
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Handle errors
                    return error.json();
                })
                .then(errorResponse => {
                    if (errorResponse) {
                        context.model = errorResponse;
                        if (context.model.resultCode === "LOCKEDOUT" || context.model.resultCode === "REQUIREMFA") {
                            window.location = context.model.redirectUrl;
                        }
                    }
                });
        }

        BareaApp.prototype.startFreja = function () {
            var context = this.getData();
            var baseurl = '@Url.Content("~/Identity/Account/")';
            var endpointurl = baseurl + "Login?handler=StartFreja";
            var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

            // Prepare request options
            var requestOptions = {
                method: "POST", // Using POST request
                headers: {
                    "Content-Type": "application/json", // JSON request
                    "RequestVerificationToken": antiforgerytoken // Security token
                },
                body: JSON.stringify(context.model) // Convert model to JSON
            };

            // Send the request
            fetch(endpointurl, requestOptions)
                .then(response => response.json()) // Parse response as JSON
                .then(response => {
                    context.model = response; // Update model with response
                })
                .catch(error => {
                    console.error('Error:', error);
                    return error.json(); // Parse error response
                })
                .then(errorResponse => {
                    if (errorResponse) {
                        context.model = errorResponse; // Handle error response
                    }
                });
        }

        BareaApp.prototype.authenticateFreja = function() {
            var context = this.getData();
            var baseurl = '@Url.Content("~/Identity/Account/")';
            var endpointurl = baseurl + "Login?handler=AuthenticateFreja";
            var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

            // Prepare request options
            var requestOptions = {
                method: "POST", // Using POST request
                headers: {
                    "Content-Type": "application/json", // JSON request
                    "RequestVerificationToken": antiforgerytoken // Security token
                },
                body: JSON.stringify(context.model) // Convert model to JSON
            };

            // Send the request
            fetch(endpointurl, requestOptions)
                .then(response => response.json()) // Parse response as JSON
                .then(response => {
                    window.location = response.returnUrl; // Redirect on success
                })
                .catch(error => {
                    console.error('Error:', error);
                    return error.json(); // Parse error response
                })
                .then(errorResponse => {
                    if (errorResponse) {
                        context.model = errorResponse; // Store error response
                        if (context.model.resultCode === "LOCKEDOUT" || context.model.resultCode === "REQUIREMFA") {
                            window.location = context.model.redirectUrl; // Redirect if locked out or MFA required
                        }
                    }
                });
        }


        app.mount("app",
        {
            model: { userName: "", password: "", resultCode: "INIT", returnUrl: "@Model.ReturnUrl", actionCode: "" }
        });


       
    </script>
}