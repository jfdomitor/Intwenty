@page
@model LoginModel
@using Microsoft.Extensions.Options
@using Intwenty.Model
@{
    ViewData["Title"] = Localizer["Log In"].Value;
}



<partial name="_LoginHeader" model="Model" />


<div class="row" id="app">

    @if (HttpContext.Request.Query.ContainsKey(Settings.Value.AccountsEmergencyLoginQueryKey))
    {
        <partial name="_LoginLocal" model="Model" />

    }
    else
    {

        if (Settings.Value.UseBankIdLogin)
        {
            <partial name="_LoginBankId" model="Model" />

        }
        else if (Settings.Value.UseFrejaEIdLogin)
        {

            <partial name="_LoginFreja" model="Model" />
        }
        else
        {

            if (Settings.Value.UseLocalLogins)
            {
                <partial name="_LoginLocal" model="Model" />
            }


            if (Settings.Value.UseExternalLogins)
            {
                <partial name="_LoginExternal" model="Model" />
            }
        }

    }

</div>



@section Scripts
 {

    <script type="module">

        import { BareaApp } from '/js/barea_dev.js';

        const content = 
        {
            data:
            {
               model: { userName: "", password: "", resultCode: "INIT", returnUrl: "@Model.ReturnUrl", actionCode: "" }
            }
            ,methods:{

                localLogin: function (event, element) 
                {
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Login?handler=LocalLogin";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    fetch(endpointurl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": antiforgerytoken
                        },
                        body: JSON.stringify(clientdata.model)
                    })
                        .then(response => response.json())
                        .then(data => {

                            if (data.resultCode==='SUCCESS') {
                                window.location = data.returnUrl;
                            } else {
                                clientdata.model = data;
                                if (clientdata.model.resultCode === "LOCKEDOUT" || clientdata.model.resultCode === "REQUIREMFA") {
                                    window.location = clientdata.model.redirectUrl;
                                }
                            }
                        })
                        .catch(error => console.error("Error:", error));
                },
                startBankId: function (method) {
                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Login?handler=StartBankId";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    clientdata.model.actionCode = method;

                    // Prepare the request options
                    var requestOptions = {
                        method: "POST",  // Use POST method
                        headers: {
                            "Content-Type": "application/json",  // Set content type as JSON
                            "RequestVerificationToken": antiforgerytoken  // Add antiforgery token in the headers
                        },
                        body: JSON.stringify(clientdata.model)  // Convert model to JSON string
                    };

                    // Use fetch to send the request
                    fetch(endpointurl, requestOptions)
                        .then(response => response.json())  // Parse the response as JSON
                        .then(response => {
                            clientdata.model = response;
                            if (clientdata.model.resultCode === "BANKID_AUTH_QR") {
                                setTimeout(function () {
                                    clientdata.authenticateBankId();
                                }, 500);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);  // Log any error that occurs
                            clientdata.model = { error: error.message };  // Store the error in the model
                        });
                },
                authenticateBankId: function() {

                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Login?handler=AuthenticateBankId";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    clientdata.model.actionCode = "WAIT_FOR_BANKID_AUTH";

                    // Prepare request options
                    var requestOptions = {
                        method: "POST", // Using POST request
                        headers: {
                            "Content-Type": "application/json", // JSON request
                            "RequestVerificationToken": antiforgerytoken // Security token
                        },
                        body: JSON.stringify(clientdata.model) // Convert model to JSON
                    };

                    // Send the request
                    fetch(endpointurl, requestOptions)
                        .then(response => response.json()) // Parse response as JSON
                        .then(response => {
                            // Redirect if successful
                            window.location = response.returnUrl;
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Handle errors
                            return error.json();
                        })
                        .then(errorResponse => {
                            if (errorResponse) {
                                clientdata.model = errorResponse;
                                if (clientdata.model.resultCode === "LOCKEDOUT" || clientdata.model.resultCode === "REQUIREMFA") {
                                    window.location = clientdata.model.redirectUrl;
                                }
                            }
                        });
                },
                startFreja: function () {

                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Login?handler=StartFreja";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    // Prepare request options
                    var requestOptions = {
                        method: "POST", // Using POST request
                        headers: {
                            "Content-Type": "application/json", // JSON request
                            "RequestVerificationToken": antiforgerytoken // Security token
                        },
                        body: JSON.stringify(clientdata.model) // Convert model to JSON
                    };

                    // Send the request
                    fetch(endpointurl, requestOptions)
                        .then(response => response.json()) // Parse response as JSON
                        .then(response => {
                            clientdata.model = response; // Update model with response
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            return error.json(); // Parse error response
                        })
                        .then(errorResponse => {
                            if (errorResponse) {
                                clientdata.model = errorResponse; // Handle error response
                            }
                        });
                },
                authenticateFreja: function() {

                    var baseurl = '@Url.Content("~/Identity/Account/")';
                    var endpointurl = baseurl + "Login?handler=AuthenticateFreja";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    // Prepare request options
                    var requestOptions = {
                        method: "POST", // Using POST request
                        headers: {
                            "Content-Type": "application/json", // JSON request
                            "RequestVerificationToken": antiforgerytoken // Security token
                        },
                        body: JSON.stringify(clientdata.model) // Convert model to JSON
                    };

                    // Send the request
                    fetch(endpointurl, requestOptions)
                        .then(response => response.json()) // Parse response as JSON
                        .then(response => {
                            window.location = response.returnUrl; // Redirect on success
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            return error.json(); // Parse error response
                        })
                        .then(errorResponse => {
                            if (errorResponse) {
                                clientdata.model = errorResponse; // Store error response
                                if (clientdata.model.resultCode === "LOCKEDOUT" || clientdata.model.resultCode === "REQUIREMFA") {
                                    window.location = clientdata.model.redirectUrl; // Redirect if locked out or MFA required
                                }
                            }
                        });
                }
            },
            mounted: function () 
            {
                @if (Settings.Value.UseFrejaEIdLogin)
                {
                    <text>
                          this.startFreja();
                    </text>
                }
                @if (Settings.Value.UseBankIdLogin && Settings.Value.BankIdUsage == BankIdUsageTypes.OtherDevice)
                {
                    <text>
                         this.startBankId('BANKID_START_OTHER');
                    </text>
                }

                return true;
            }

         };

         let app = new BareaApp();
         let clientdata = await app.mount("app", content);

    </script>
}