@page
@model IndexModel
@{

    ViewData["Title"] = Localizer["Profile"].Value;
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<h4>@ViewData["Title"]</h4>


<div id="app">

    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" ba-if="root.model.modelSaved">
        <strong>@Localizer["Changes Saved"]</strong><br />
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="alert alert-danger" ba-if="root.model.resultCode=='PROFILE_SAVE_ERROR'">
        @Localizer["PROFILE_SAVE_ERROR"]
    </div>

    <div class="row">

        <div class="col-md-6">

            <div class="form-group">
                <label>@Localizer["User Name"]</label>
                <input type="text" ba-bind="root.model.userName" class="form-control" disabled />
            </div>


            @if (Settings.Value.AccountsLegalIdNumberUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsLegalIdNumberUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Legal ID Number"]</label>
                        <input type="text" ba-bind="root.model.legalIdNumber" class="form-control" id="legalidnumber" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsLegalIdNumberUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Legal ID Number"]</label>
                        <input type="text" ba-bind="root.model.legalIdNumber" class="form-control" id="legalidnumber" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsLegalIdNumberUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Legal ID Number"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.legalIdNumber" class="form-control" id="legalidnumber" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsEmailUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsEmailUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Email"]</label>
                        <input type="email" ba-bind="root.model.email" class="form-control" id="email" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsEmailUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Email"]</label>
                        <input type="email" ba-bind="root.model.email" class="form-control" id="email" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsEmailUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Email"] <span style="color: red"> *</span></label>
                        <input type="email" ba-bind="root.model.email" class="form-control" id="email" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsPhoneUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsPhoneUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Phone"]</label>
                        <input type="number" ba-bind="root.model.phoneNumber" class="form-control" id="phone" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsPhoneUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Phone"]</label>
                        <input type="number" ba-bind="root.model.phoneNumber" class="form-control" id="phone" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsPhoneUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Phone"] <span style="color: red"> *</span></label>
                        <input type="number" ba-bind="root.model.phoneNumber" class="form-control" id="phone" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsNameUsage.IsAccountPageVisible)
            {
                <br />
                <br />
                if (Settings.Value.AccountsNameUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["First Name"]</label>
                        <input type="text" ba-bind="root.model.firstName" class="form-control" id="firstname" disabled />
                    </div>

                    <div class="form-group">
                        <label>@Localizer["Last Name"]</label>
                        <input type="text" ba-bind="root.model.lastName" class="form-control" id="lastname" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsNameUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["First Name"]</label>
                        <input type="text" ba-bind="root.model.firstName" class="form-control" id="firstname" autocomplete="nope" />
                    </div>

                    <div class="form-group">
                        <label>@Localizer["Last Name"]</label>
                        <input type="text" ba-bind="root.model.lastName" class="form-control" id="lastname" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsNameUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["First Name"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.firstName" class="form-control" id="firstname" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>

                    <div class="form-group">
                        <label>@Localizer["Last Name"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.lastName" class="form-control" id="lastname" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }



            @if (Settings.Value.AccountsCompanyNameUsage.IsAccountPageVisible)
            {
                <br />
                <br />

                if (Settings.Value.AccountsCompanyNameUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Company Name"]</label>
                        <input type="text" ba-bind="root.model.companyName" class="form-control" id="companyname" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsCompanyNameUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Company Name"]</label>
                        <input type="text" ba-bind="root.model.companyName" class="form-control" id="companyname" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsCompanyNameUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Company Name"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.companyName" class="form-control" id="companyname" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }


            @if (Settings.Value.AccountsUserSelectableRoleUsage.IsAccountPageVisible && Settings.Value.AccountsUserSelectableRoles != null)
            {
                <br />
                <br />

                if (Settings.Value.AccountsUserSelectableRoleUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Requested Role"]</label>
                        <select ba-bind="root.model.requestedRole" class="form-control" id="userselectedrole" disabled>
                            @{
                                foreach (var t in Settings.Value.AccountsUserSelectableRoles)
                                {
                                    <option value="@t.RoleName">@t.Title</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (Settings.Value.AccountsUserSelectableRoleUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Requested Role"]</label>
                        <select ba-bind="root.model.requestedRole" class="form-control" id="userselectedrole">
                            @{
                                foreach (var t in Settings.Value.AccountsUserSelectableRoles)
                                {
                                    <option value="@t.RoleName">@t.Title</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (Settings.Value.AccountsUserSelectableRoleUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Requested Role"] <span style="color: red"> *</span></label>
                        <select ba-bind="root.model.requestedRole" class="form-control" id="userselectedrole" oninput="onUserInput(event)" data-required="True">
                            @{
                                foreach (var t in Settings.Value.AccountsUserSelectableRoles)
                                {
                                    <option value="@t.RoleName">@t.Title</option>
                                }
                            }
                        </select>
                    </div>
                }

            }



            @if (Settings.Value.AccountsAddressUsage.IsAccountPageVisible)
            {
                <br />
                <br />

                if (Settings.Value.AccountsAddressUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Address"]</label>
                        <input type="text" ba-bind="root.model.address" class="form-control" id="address" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsAddressUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Address"]</label>
                        <input type="text" ba-bind="root.model.address" class="form-control" id="address" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsAddressUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Address"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.address" class="form-control" id="address" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsZipCodeUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsZipCodeUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Zipcode"]</label>
                        <input type="text" ba-bind="root.model.zipCode" class="form-control" id="zipcode" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsZipCodeUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Zipcode"]</label>
                        <input type="text" ba-bind="root.model.zipCode" class="form-control" id="zipcode" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsZipCodeUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Zipcode"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.zipCode" class="form-control" id="zipcode" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsCityUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsCityUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["City"]</label>
                        <input type="text" ba-bind="root.model.city" class="form-control" id="city" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsCityUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["City"]</label>
                        <input type="text" ba-bind="root.model.city" class="form-control" id="city" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsCityUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["City"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.city" class="form-control" id="city" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsCountyUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsCountyUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["County"]</label>
                        <input type="text" ba-bind="root.model.county" class="form-control" id="county" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsCountyUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["County"]</label>
                        <input type="text" ba-bind="root.model.county" class="form-control" id="county" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsCountyUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["County"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.county" class="form-control" id="county" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }

            @if (Settings.Value.AccountsCountryUsage.IsAccountPageVisible)
            {
                if (Settings.Value.AccountsCountryUsage.AccountPage == InputUsageType.Readonly)
                {
                    <div class="form-group">
                        <label>@Localizer["Country"]</label>
                        <input type="text" ba-bind="root.model.country" class="form-control" id="country" disabled />
                    </div>
                }
                else if (Settings.Value.AccountsCountryUsage.AccountPage == InputUsageType.Editable)
                {
                    <div class="form-group">
                        <label>@Localizer["Country"]</label>
                        <input type="text" ba-bind="root.model.country" class="form-control" id="country" autocomplete="nope" />
                    </div>
                }
                else if (Settings.Value.AccountsCountryUsage.AccountPage == InputUsageType.EditableRequired)
                {
                    <div class="form-group">
                        <label>@Localizer["Country"] <span style="color: red"> *</span></label>
                        <input type="text" ba-bind="root.model.country" class="form-control" id="country" oninput="onUserInput(event)" data-required="True" autocomplete="nope" />
                    </div>
                }
            }



        </div>
        <div class="col-md-6">

            @if (Settings.Value.AccountsEnableProfilePicture)
            {
                <div>

                    <div hidden photosuccess class="alert alert-success"><i class="far fa-check-circle"></i><span></span></div>
                    <!-- img src="Url(Model.UserPhoto)" style="width:120px; background: #FFFFFF; margin: auto; padding: 6px" /  -->
                    <div id="modal">
                        <div id="croppercontainer"></div>
                        <div>
                            <table>
                                <tr>
                                    <td>
                                        <label for="upfile" class="btn btn-secondary" id="select_file" style="margin-left:25px">@Localizer["Add/Change Photo"]</label>
                                        <input id="upfile" style="visibility:hidden;display:none" type="file" accept="image/*">
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-primary" id="uploadPictureBtn" style="margin-left:2px;margin-top:-8px">@Localizer["Upload"]</button>
                                    </td>
                                </tr>
                            </table>


                        </div>

                    </div>

                </div>


            }

            @if (Settings.Value.AccountsAllowEmailNotificationsUsage.IsAccountPageVisible ||
                 Settings.Value.AccountsAllowSmsNotificationsUsage.IsAccountPageVisible ||
                 Settings.Value.AccountsAllowPublicProfileUsage.IsAccountPageVisible)
            {


                <br />
                <br />
                <div style="margin-left:25px">
                    <br />
                    <i><b>@Localizer["Settings"]</b></i>
                    <br />

                    @if (Settings.Value.AccountsAllowPublicProfileUsage.IsAccountPageVisible)
                    {
                        if (Settings.Value.AccountsAllowPublicProfileUsage.AccountPage == InputUsageType.Readonly)
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowpublicprofile" type="checkbox" ba-bind="root.model.allowPublicProfile" disabled /><label>@Localizer["Allow Public Profile"]</label>
                            </div>
                        }
                        else
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowpublicprofile" type="checkbox" ba-bind="root.model.allowPublicProfile" /><label>@Localizer["Allow Public Profile"]</label>
                            </div>
                        }
                    }

                    @if (Settings.Value.AccountsAllowEmailNotificationsUsage.IsAccountPageVisible)
                    {
                        if (Settings.Value.AccountsAllowEmailNotificationsUsage.AccountPage == InputUsageType.Readonly)
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowemailnotification" type="checkbox" ba-bind="root.model.allowEmailNotifications" disabled /><label>@Localizer["Allow Email Notifications"]</label>
                            </div>
                        }
                        else
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowemailnotification" type="checkbox" ba-bind="root.model.allowEmailNotifications" /><label>@Localizer["Allow Email Notifications"]</label>
                            </div>
                        }
                    }

                    @if (Settings.Value.AccountsAllowSmsNotificationsUsage.IsAccountPageVisible)
                    {
                        if (Settings.Value.AccountsAllowSmsNotificationsUsage.AccountPage == InputUsageType.Readonly)
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowsmsnotification" type="checkbox" ba-bind="root.model.allowSmsNotifications" disabled /><label>@Localizer["Allow SMS Notifications"]</label>
                            </div>
                        }
                        else
                        {
                            <div class="largecheckbox">
                                <input id="cb_allowsmsnotification" type="checkbox" ba-bind="root.model.allowSmsNotifications" /><label>@Localizer["Allow SMS Notifications"]</label>
                            </div>
                        }
                    }

                </div>
            }

        </div>
    </div>


    <button id="update-profile-button" type="button" ba-click="saveUserInfo()" class="btn btn-primary">@Localizer["Save"]</button>

</div>


@section Scripts
{
    <script type="module">

        import { BareaApp } from '/lib/barea/barea.js';

         const content = {
            data: {
                model: { resultCode: "" }
            },
            methods: 
            {
                saveUserInfo: async function() {
                    let baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                    let endpointurl = `${baseurl}Index?handler=UpdateUser`;
                    let valid = true;

                    document.querySelectorAll("[data-required]").forEach(element => {
                        let required = element.getAttribute("data-required");
                        let id = element.id;
                        if (required === "True" && id) {
                            let val = element.value;
                            if (!val || val.length < 1) {
                                element.classList.add("requiredNotValid");
                                valid = false;
                            }
                        }
                    });

                    if (!valid) return;

                    let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    try {
                        let response = await fetch(endpointurl, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": antiforgerytoken
                            },
                            body: JSON.stringify(clientdata.model)
                        });
                        clientdata.model = await response.json();
                        clientdata.model.modelSaved = true;
                        setTimeout(() => { clientdata.model.modelSaved = false; }, 3000);
                    } catch (error) {
                        console.error("Error saving user info:", error);
                    }
                },
                onUserInput : function(event) {
                    if (!event || !event.target) return;
                    let elementId = event.target.id;
                    if (!elementId) return;

                    document.querySelectorAll("[data-required]").forEach(element => {
                        let required = element.getAttribute("data-required");
                        if (required === "True" && element.id === elementId) {
                            let val = event.target.value;
                            if (val && val.length > 0) {
                                element.classList.remove("requiredNotValid");
                            }
                        }
                    });
                },
                setUpCroppie : function(applicationData) {
                    let baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                    let endpointurl = `${baseurl}Index?handler=ProfilePicture`;
                    let antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';
                    let fileInput = document.getElementById("upfile");
                    let uploadButton = document.getElementById("uploadPictureBtn");
                    let cropperContainer = document.getElementById("croppercontainer");

                    let croppieInstance = new Croppie(cropperContainer, {
                        viewport: { width: 160, height: 160 },
                        boundary: { width: 210, height: 210 },
                        showZoomer: true,
                        url: applicationData.model.profilePictureBase64
                    });

                    fileInput.addEventListener("change", function () {
                        let file = fileInput.files[0];
                        if (!file) return;

                        let reader = new FileReader();
                        reader.onload = function (e) {
                            cropperContainer.classList.remove("hidden");
                            uploadButton.classList.remove("hidden");
                            fileInput.classList.add("hidden");
                            croppieInstance.bind({ url: e.target.result });
                        };
                        reader.readAsDataURL(file);
                    });

                    uploadButton.addEventListener("click", async function () {
                        let blob = await croppieInstance.result({ type: "blob" });
                        let formData = new FormData();
                        formData.append("profilePicture", blob);
                        formData.append("fileName", "user_profile_picture.png");
                        formData.append("userName", "@User.Identity.Name");

                        try {
                            await fetch(endpointurl, {
                                method: "POST",
                                body: formData,
                                headers: { "RequestVerificationToken": antiforgerytoken }
                            });
                            uploadButton.classList.add("hidden");
                        } catch (error) {
                            console.error("Error uploading profile picture:", error);
                        }
                    });
                }
            },
            mounted: async function(applicationData) {
                let baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                let endpointurl = `${baseurl}Index/?handler=Load`;

                try {
                    let response = await fetch(endpointurl);
                    applicationData.model = await response.json();
                    this.setUpCroppie(applicationData);
                } catch (error) {
                    console.error("Error loading data:", error);
                }
            }
        };


         let app = new BareaApp();
         let clientdata = await app.mount("app", content);


    </script>






}
