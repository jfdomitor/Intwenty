@page
@model MfaEmailModel
@{
    ViewData["Title"] = "Email 2FA";
    ViewData["ActivePage"] = ManageNavPages.MfaAuth;
}


<h4>@ViewData["Title"]</h4>

<div id="app">

    <div class="alert alert-primary" ba-if="root.step==1">
        @Localizer["MFAEMALCODESENT"]
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-danger" ba-if="root.errorVerifyEmail">
        @Localizer["MFANOTVERIFIED"] <a asp-page="./MfaEmail">@Localizer["clicking here"]</a>
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-success" ba-if="root.step==2">
        @Localizer["Thank you. Two-factor authentication is now set up"]
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-danger" ba-if="root.model.resultCode=='ERROR_NOEMAIL'">
        @Localizer["You must update your email first, do it by"] <a asp-page="./Index">@Localizer["clicking here"]</a>
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div class="row">
        <div class="col-md-6">

            <div class="form-group" ba-if="root.step==1">
                <label clase="control-label">@Localizer["Code"]</label>
                <input type="text" v-model="root.model.code" class="form-control" />
                <button class="btn btn-primary m-2" ba-click="sendCode()" ba-hide="root.model.resultCode=='ERROR_NOEMAIL'">@Localizer["Verify"]</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {

    <script type="module">

        import {BareaApp} from '/js/barea_dev.js';

         const appcontent = {
            data:
            {
                model: { email: "", code: "", resultCode:"" },
                step: 1,
                errorVerifyEmail: false
            },
            methods: {

                 sendCode: function () 
                 {
                    var baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                    var endpointurl = baseurl + "MfaEmail?handler=VerifyCode";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    fetch(endpointurl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": antiforgerytoken
                        },
                        body: JSON.stringify(clientdata.model)
                    })
                    .then(response => response.json())
                    .then(data => {
                        clientdata.step = 2;
                        clientdata.model = data;
                    })
                    .catch(error => {
                        clientdata.errorVerifyEmail = true;
                        clientdata.model = error;
                    });

                  }
            },
            computed:{}
            ,mounted: function (applicationData) {
                var baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                var endpointurl = baseurl + "MfaEmail?handler=Load";

                fetch(endpointurl)
                    .then(response => response.json())
                    .then(data => {
                        applicationData.model = data;
                    })
                    .catch(error => {
                        applicationData.model = error;
                    });
            }

        };

           const app = new BareaApp();
           let clientdata = await app.mount("app", appcontent);

    </script>

}

