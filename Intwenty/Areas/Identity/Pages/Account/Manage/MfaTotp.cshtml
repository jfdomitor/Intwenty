@page
@model MfaTotpModel
@{
    ViewData["Title"] = "Configure 2FA App";
    ViewData["ActivePage"] = ManageNavPages.MfaAuth;
}


<h4>@ViewData["Title"]</h4>

<div id="app">
    <div class="alert alert-danger" ba-if="root.errorVerifyCode">
        @Localizer["MFATOTPUNVERIFIED"]
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <div class="alert alert-success" ba-if="root.step==2">
        @Localizer["Thank you. Two-factor authentication is now set up"]
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <div ba-if="root.step==1">
        <p>@Localizer["MFATOTPSTEPS_1"]</p>
        <ol class="list">
            <li>
                <p>@Localizer["MFATOTPSTEPS_2"]</p>
            </li>
            <li>
                <p>@Localizer["MFATOTPSTEPS_3"] <kbd>{{root.model.sharedKey}}</kbd> @Localizer["MFATOTPSTEPS_4"]</p>
                <div id="qrCode"></div>
                <div id="qrCodeData" ba-href="root.model.authenticatorURI"></div>
            </li>
            <li>
                <br />
                <p> @Localizer["MFATOTPSTEPS_5"]</p>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">@Localizer["Code"]</label>
                            <input type="number" class="form-control" autocomplete="off" ba-bind="root.model.code" />
                        </div>
                        <button type="submit" class="btn btn-primary" ba-click="sendCode()">@Localizer["Verify"]</button>
                    </div>
                </div>
            </li>
        </ol>
    </div>
</div>

@section Scripts {


    <script type="text/javascript" src="~/lib/qrcode/qrcode.min.js"></script>
    <script type="module">

        import {BareaApp} from '/js/barea_dev.js';

        const appcontent = {
            data:
            {
                model: { code: "", resultCode:"" },
                step: 1,
                errorVerifyCode: false,
                qrCode: {}
            },
            methods:
            {

                sendCode: function () {
       
                    var baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                    var endpointurl = baseurl + "MfaTotp?handler=VerifyCode";
                    var antiforgerytoken = '@AntiForgery.GetAndStoreTokens(HttpContext).RequestToken';

                    fetch(endpointurl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": antiforgerytoken
                        },
                        body: JSON.stringify(clientdata.model)
                    })
                    .then(response => response.json())
                    .then(data => {
                        clientdata.step = 2;
                        clientdata.model = data;
                    })
                    .catch(error => {
                        clientdata.errorVerifyCode = true;
                        clientdata.model = error;
                        clientdata.qrCode.makeCode(context.model.authenticatorURI);
                    });
                }
            },
            computed: {
            },
            mounted: function (applicationData) {

                var baseurl = '@Url.Content("~/Identity/Account/Manage/")';
                var endpointurl = baseurl + "MfaTotp?handler=Load";

                const retval = fetch(endpointurl)
                    .then(response => response.json())
                    .then(data => {
                        applicationData.model = data;
                        applicationData.qrCode = new QRCode(document.getElementById("qrCode"), {
                            text: applicationData.model.authenticatorURI,
                            width: 150,
                            height: 150
                        });
                    })
                    .catch(error => console.error("Error loading data:", error));

                    return retval;
            }

        };

        const app = new BareaApp();
        let clientdata = await app.mount("app", appcontent);

    </script>
}
