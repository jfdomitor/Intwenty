@model Intwenty.Model.IntwentyView
@{
    ViewData["Title"] = Model.LocalizedTitle;
}
<!--
   To override this view for all applications:
   1. Add this file to the folder Views/Application/View.cshtml in the project that consumes the intwenty RCL Package (Razor Class Library)


   To override this view for one application:
   1. Add this file to the folder Views/Application/[Your app name]/yourviewname.cshtml
   2. Set the razor view property in the propertylist of the view (view designer) to Views/Application/[Your app name]/yourviewname.cshtml
-->

<br />
<br />

@await Html.PartialAsync("_Modals")


<div id="@Model.RuntimeRequestInfo.ViewHtmlId">

    <!-- 1. ADD MODALS AND SOME CONFIG -->
    @* @foreach (var iface in Model.UserInterface) *@
    @* { *@
    @*     @foreach (var mip in iface.ModalInterfaces) *@
    @*     { *@
    @*         @await Html.PartialAsync("UISections/_ModalInputInterface", mip) *@
    @*     } *@
    @* } *@


    <!-- 2. RENDER THE VIEW HEADER -->
    @await Html.PartialAsync("UISections/_ApplicationViewHeader", Model)


    <br />

    <!-- 3. AFTER SAVE MESSAGE -->
    <div class="alert alert-success alert-dismissible fade show" role="alert" id="savealert" ba-if="root.modelSaved">
        <strong>@Localizer["Changes Saved"] !</strong><br />
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>


    @foreach (var sect in Model.VerticalSections)
    {
        var colapse = "class=\"collapse\"";
        var card = "class=\"card\"";
        var cardbody = "class=\"card-body\"";
        var accordion = "class=\"accordion\"";

        <div @Html.Raw(accordion) id="accordion_@sect.Id">
            <div @Html.Raw(card) id="cardheader_@sect.Id" style="overflow:inherit">
                @if (sect.ExcludeOnRender)
                {
                    <div class="card-header">
                        <ul class="nav">
                            <li class="nav-item">
                                @if (sect.Collapsible)
                                {
                                    <button class="btn btn-sm btn-secondary" type="button" data-bs-toggle="collapse" data-target="#colapse_@sect.Id" style="margin-right:20px;margin-bottom:5px"><span class="fa fa-expand-alt"></span></button>
                                }
                            </li>
                            <li class="nav-item">
                                <h4>@sect.LocalizedTitle</h4>
                            </li>
                        </ul>


                    </div>
                }

                <div id="colapse_@sect.Id" @Html.Raw(colapse) data-parent="#accordion_@sect.Id">
                    <div @Html.Raw(cardbody) id="cardbody_@sect.Id">
                        <br />
                        <div class="row">
                             @if (Model.ViewType == IntwentyViewFunction.Edit || Model.ViewType == IntwentyViewFunction.Create){
                                @await Html.PartialAsync("UISections/_InputInterface", sect)
                                if (sect.ListView!=null){
                                    @await Html.PartialAsync("UISections/_SubTableListInterface", sect.ListView)
                                 }
                             }
                             @if (Model.ViewType == IntwentyViewFunction.List){
                                @await Html.PartialAsync("UISections/_MainTableListInterface", sect.ListView)
                             }

                        </div> <!--ROW SECTION-->
                    </div> <!--CARD-BODY -->
                </div><!--COLAPSE -->
            </div>  <!--CARD -->
    </div><!--ACCORDION -->

    <br />

        @* iface.CurrentRenderContext = CurrentRenderContextOptions.View; *@

        @* <!-- 4. RENDER APPLICATION LISTVIEW --> *@
        @* if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsMainApplicationTableInterface && Model.IsApplicationListView()) *@
        @* { *@
        @*     @await Html.PartialAsync("UISections/_MainTableListInterface", iface) *@
        @* } *@

        @* <!-- 5. RENDER APPLICATION ONPAGE INPUT INTERFACES --> *@ *@
        @* @* if (iface.IsMetaTypeInputInterface && iface.IsMainApplicationTableInterface && Model.IsApplicationInputView()) *@ *@
        @* @* { *@ *@
        @* @*     @await Html.PartialAsync("UISections/_InputInterface", iface) *@ *@
        @* @* } *@

        @* <!-- 6. RENDER APPLICATION ONPAGE SUBTABLE INTERFACES --> *@
        @* if (iface.IsMetaTypeListInterface && iface.Table.Id > 0 && iface.IsSubTableUserInterface && Model.IsApplicationInputView()) *@
        @* { *@
        @*     @await Html.PartialAsync("UISections/_SubTableListInterface", iface) *@
        @* } *@

    }


</div>

<br />


@section Scripts
{
    @await Html.PartialAsync("UISections/_ApplicationViewJSPrototypes", Model)
    @await Html.PartialAsync("UISections/_ApplicationViewJS", Model)
    @foreach (var childview in Model.RuntimeRequestInfo.ChildViews)
    {
        @await Html.PartialAsync("UISections/_ApplicationViewJS", childview)
    }
}
