@model ViewModel

@{
    
    var aftersaveactionpath = string.Empty;
    var aftersaveaction = string.Empty;
    var maintableconfig = Model.GetMainTableUIConfiguration();
    var subtableconfig = Model.GetSubTableUIConfigurations();


    //WHAT SHOULD HAPPEN WHEN THIS VIEW IS SAVED
    if (Model.HasSaveFunction)
    {
        aftersaveaction = Model.SaveFunction.GetPropertyValue("AFTERSAVEACTION");
        if (aftersaveaction == "GOTOVIEW")
        {
            aftersaveactionpath = Model.SaveFunction.BuildRuntimeURI(Model.RuntimeRequestInfo.RequestInfo, Model.RuntimeRequestInfo.Id);
        }
    }
}

<script>
        
        let app = getBareaApp();

        const content = {
            data:
            {
                 baseurl: "@Model.RuntimeRequestInfo.EndpointBasePath"
                ,requestInfo: "@Model.RuntimeRequestInfo.RequestInfo"
                ,appMainTable: "@Model.ApplicationInfo.DbName"
                ,appId: @Model.ApplicationInfo.Id
                ,applicationViewId: @Model.Id
                ,instanceId: @Model.RuntimeRequestInfo.Id
                ,version:1
                ,applist: []
                ,model: { @Model.ApplicationInfo.DbName: {} @foreach (var st in subtableconfig){<text>,@st.TableName:[]</text>}}
                ,validation: {}
                ,aftersaveactionpath: '@aftersaveactionpath'
                ,aftersaveaction: '@aftersaveaction'
                ,modelSaved: false
                ,idgen: -1
                ,model_settings: { showFilter: false }
                ,model_pageInfo: { applicationId: @Model.ApplicationInfo.Id, applicationViewId: @Model.Id, maxCount: 0, pageSize: @maintableconfig.PageSize , pageNumber: 0, filterValues: [],skipPaging:@maintableconfig.SkipPaging, properties:"", parentId:0, foreignKeyId:0,foreignKeyName:"", sortColumns:"Id", sortDirection:"ASC" }
                @foreach (var s in subtableconfig)
                {
                    var table = s.TableName;
                    var table_settings = s.TableName + "_settings";
                    var table_pageinfo = s.TableName + "_pageInfo";
                    <text>
                                 ,@table:{}
                                 ,@table_settings: { showFilter: false }
                                 ,@table_pageinfo: { applicationId: @Model.ApplicationInfo.Id, applicationViewId:@Model.Id, maxCount: 0, pageSize: @s.PageSize, pageNumber: 0, filterValues: [], skipPaging:@s.SkipPaging, properties: "", parentId: 0, foreignKeyId: 0, foreignKeyName: "", sortColumns: "Id", sortDirection: "ASC" }
                    </text>
                }
            },
            methods:
            {
                goToLink: function(event,element,data,func_edit_path,func_edit_path_requestinfo){
                    let requestInfo =func_edit_path_requestinfo;
                    let editPath = func_edit_path;
                    if (requestInfo && requestInfo!== ""){
                        window.location.href = editPath + "/" +data.Id+"/" + requestInfo;
                    }else{
                      window.location.href = editPath + "/" +data.Id;
                    }
                }
                ,openApplicationModal: function (event,element,data,uimetacode)
                {
                    var context = this;
                    var rootdata = this.getData();

                    var savefunc = function ()
                    {
                        var saveendpoint = "@Model.RuntimeRequestInfo.EndpointSaveApplicationPath";
                        rootdata.model[context.appMainTable].ApplicationId = rootdata.appId;
                        rootdata.model[context.appMainTable].ApplicationViewId = rootdata.applicationViewId;
                        rootdata.model[context.appMainTable].Properties = rootdata.requestInfo;

                        fetch(saveendpoint, {
                            method: "POST"
                            ,headers:{
                                contentType: "application/json"
                            }
                            ,body: JSON.stringify(context.model)
                        })
                        .then(response => {
                            
                            @if (Model.IsApplicationListView())
                             {
                                <text>
                                     rootdata.modelSaved = true;
                                     rootdata.getMainTablePage();
                                     setTimeout(function () { rootdata.modelSaved = false; }, 3000);
                                </text>
                             }
                       })
                       .catch(error => console.error("Error:", error));  // Handle any errors
                    
                   };

                    if (data)
                    {
                            rootdata.model[context.appMainTable] = {};
                            rootdata.model[context.appMainTable] = data;

                            const saveBtn = getTag('addEditModalSaveBtn_' + uimetacode);
                            saveBtn.replaceWith(saveBtn.cloneNode(true)); 
                            saveBtn.addEventListener('click', savefunc);
                            const modaltag = getTag('addEditModal_' + uimetacode);
                            const modal = new bootstrap.Modal(modaltag, {backdrop:'static',keyboard:true,focus:true});
                            modal.show();
                            modaltag.addEventListener('hidden.bs.modal', function () {
                                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                                document.body.classList.remove('modal-open'); // Ensures scrolling is re-enabled
                            });
                    }
                    else
                    {

                        var endpointurl = "@Model.RuntimeRequestInfo.EndpointCreateNewPath/" + rootdata.appId;
                        if (rootdata.requestInfo)
                            endpointurl += "/" + rootdata.requestInfo;

                        fetch(endpointurl, {
                             method: "GET"
                            ,headers:{contentType: "application/json"}
                        })
                        .then(response=>{
                            rootdata.model = JSON.parse(response.data);
                        })
                        .then(response=>
                        {
                            const saveBtn = getTag('addEditModalSaveBtn_' + uimetacode);
                            saveBtn.replaceWith(saveBtn.cloneNode(true));
                            saveBtn.addEventListener('click', savefunc);
                            const modaltag = getTag('addEditModal_' + uimetacode);
                            const modal = new bootstrap.Modal(modaltag, {backdrop:'static',keyboard:true,focus:true});
                            modal.show();
                            modaltag.addEventListener('hidden.bs.modal', function () {
                                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                                document.body.classList.remove('modal-open'); // Ensures scrolling is re-enabled
                            });

                        });
                    }

                },
               getApplication: function ()
               {
                    var context = this;
                    var rootdata = this.getData();
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetApplicationPath/" + rootdata.appId + "/" + rootdata.applicationViewId + "/" + rootdata.instanceId;
                    if (rootdata.requestInfo != "")
                        endpointurl += "/" + rootdata.requestInfo;

                    fetch(endpointurl, {
                         method: "GET"
                        ,headers:{contentType: "application/json"}
                     })
                    .then(response => response.json())  // Parse response as JSON
                    .then(response=>{
                        rootdata.model[rootdata.appMainTable] = response.data[rootdata.appMainTable];
                     })
                     .then(response=>{
                        @foreach (var s in subtableconfig)
                        {
                            <text>
                               context.getChildTable('@s.TableName');
                            </text>
                         }
                     });

                },
                handleMainTableFilterSettings: function ()
                {
                    let context = this.getData();
                    context.model_settings.showFilter = !context.model_settings.showFilter;
                },
                addMainTableFilterValue: function () 
                {
                    let context = this.getData();
                    context.model_pageInfo.filterValues.push({ "name": "", "value": "" });
                },
                deleteMainTableFilterValue: function () 
                {
                    let context = this.getData();

                    for (var i = 0; i < context.model_pageInfo.filterValues.length; i++) {
                        if (context.model_pageInfo.filterValues[i].name === item.name) {
                            context.model_pageInfo.filterValues.splice(i, 1);
                            app.getMainTableListPage();
                            break;

                        }
                    }
                },
                runMainTableFilter: function ()
                {
                    let context = this.getData();
                    if (context.model_pageInfo.filterValues.length > 0)
                    context.getMainTableListPage();
                },
                deleteApplication: function (event,element,item) {

                   let context = this;
                   let data = this.getData();
                   let endpointurl = "@Model.RuntimeRequestInfo.EndpointDeleteApplicationPath";

                    var deleteapp = function ()
                    {
                        if (!item.ApplicationId)
                            item.ApplicationId = context.appId;

                        //If the line comes from a child application, don't set the view id
                        //The server will authorize athorize on application level instead.
                        if (item.ApplicationId === data.appId)
                            item.ApplicationViewId = data.applicationViewId;

                        item.Properties = data.requestInfo;

                        const message = JSON.stringify(item);

                        fetch(endpointurl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: message
                        })
                        .then(response => {
                            let t =response;
                            context.getMainTableListPage();

                        })
                        .catch(error => console.error("Error:", error));  // Handle any errors

                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);

                },
                getMainTableListPage: function () 
                {
                        var context = app.getData();

                        var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";

                        context.model_pageInfo.applicationViewId = context.applicationViewId;
                        context.model_pageInfo.properties = context.requestInfo;
                        context.model_pageInfo.parentId = 0;
                        const requestData = JSON.stringify(context.model_pageInfo);

                        // Create and send the request using Fetch API
                        fetch(endpointurl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: requestData
                        })
                            .then(response => response.json())  // Parse response as JSON
                            .then(response => {
                         
                                context.applist = response.data ? JSON.parse(response.data) : [];
                                context.model_pageInfo = response.currentOperation;
                                if (context.model_pageInfo.filterValues.length === 0) 
                                {
                                    this.addMainTableFilterValue();
                                }
                            })
                            .catch(error => console.error("Error:", error));  // Handle any errors
                },
                getChildTable: function (tablename)
                {
                    let context = app.getData();
                    let endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";
                    let infoobject = tablename + "_pageInfo";

                    context[infoobject].applicationViewId = context.applicationViewId;
                    context[infoobject].properties = context.requestInfo;
                    context[infoobject].dataTableDbName = dbtablename;
                    context[infoobject].parentId = context.instanceId;

                    const requestData = JSON.stringify( context[infoobject]);

                     fetch(endpointurl, {
                         method: 'POST',
                          headers: {
                            'Content-Type': 'application/json'
                         },
                         body: requestData
                      })
                      .then(response => response.json())  
                      .then(response => {

                        context.model[tablename] = JSON.parse(response.data);
                        context[infoobject] = response.currentOperation;
                       
                      })
                      .catch(error => console.error("Error:", error));  
                }
               
            },
            computed:{
                sortedAppTable: function ()
                {
                    let data = this.getData();
                    return data.applist;
                },
                isMainTableFirstPage: function ()
                {
                    let data = this.getData();
                    var pageno = data.model_pageInfo.pageNumber;
                    return (pageno <= 0);
                },
                isMainTableLastPage: function ()
                {
                    let data = this.getData();
                    var pageno = data.model_pageInfo.pageNumber;
                    var pagesize = data.model_pageInfo.pageSize;
                    var maxcount = data.model_pageInfo.maxCount;

                    return ((pageno + 1) * pagesize) >= maxcount;
                }
            },
            mounted: function ()
            {
                @if (Model.IsApplicationListView())
                {
                    <text>
                           this.getMainTableListPage();
                    </text>

                }
                else if (Model.IsApplicationInputView() && Model.RuntimeRequestInfo.Id > 0)
                {
                    <text>
                        this.getApplication();
                    </text>
                }
                else if (Model.IsApplicationInputView() && Model.RuntimeRequestInfo.Id == 0)
                {
                    <text>
                         this.createNewApplication();
                    </text>

                }
            }
            
        };

        app.mount("app", content);


        /*
        
        new Vue({
            el: '#@Model.RuntimeRequestInfo.ViewHtmlId',
            data:
            {
                baseurl: "@Model.RuntimeRequestInfo.EndpointBasePath"
                ,requestInfo: "@Model.RuntimeRequestInfo.RequestInfo"
                ,appMainTable: "@Model.ApplicationInfo.DbName"
                ,appId: @Model.ApplicationInfo.Id
                ,applicationViewId: @Model.Id
                ,instanceId: @Model.RuntimeRequestInfo.Id
                ,version:1
                ,applist: []
                ,model: { @Model.ApplicationInfo.DbName: {} @foreach (var st in subtableconfig){<text>,@st.TableName:[]</text>}}
                ,validation: {}
                ,aftersaveactionpath: '@aftersaveactionpath'
                ,aftersaveaction: '@aftersaveaction'
                ,modelSaved: false
                ,idgen: -1
                ,model_settings: { showFilter: false }
                ,model_pageInfo: { applicationId: @Model.ApplicationInfo.Id, applicationViewId: @Model.Id, maxCount: 0, pageSize: @maintableconfig.PageSize , pageNumber: 0, filterValues: [],skipPaging:@maintableconfig.SkipPaging, properties:"", parentId:0, foreignKeyId:0,foreignKeyName:"", sortColumns:"Id", sortDirection:"ASC" }
                 @foreach (var s in subtableconfig)
                 {
                     var table = s.TableName;
                     var table_settings = s.TableName + "_settings";
                     var table_pageinfo = s.TableName + "_pageInfo";
                     <text>
                     ,@table:{}
                     ,@table_settings: { showFilter: false }
                     ,@table_pageinfo: { applicationId: @Model.ApplicationInfo.Id, applicationViewId:@Model.Id, maxCount: 0, pageSize: @s.PageSize, pageNumber: 0, filterValues: [], skipPaging:@s.SkipPaging, properties: "", parentId: 0, foreignKeyId: 0, foreignKeyName: "", sortColumns: "Id", sortDirection: "ASC" }
                     </text>
                 }
            },
            methods:
            {

                openApplicationModal: function (item, uimetacode)
                {
                    var context = this;


                    var savefunc = function ()
                    {
                        var saveendpoint = "@Model.RuntimeRequestInfo.EndpointSaveApplicationPath";
                        context.model[context.appMainTable].ApplicationId = context.appId;
                        context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;
                        context.model[context.appMainTable].Properties = context.requestInfo;

                        $.ajax({
                            url: saveendpoint,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(context.model),
                            success: function (response)
                            {
                                @if (Model.IsApplicationListView())
                                {
                                    <text>
                                    context.modelSaved = true;
                                    context.getPage();
                                    setTimeout(function () { context.modelSaved = false; }, 3000);
                                    </text>
                                }
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response);
                            }
                        });
                    };


                    if (item)
                    {
                         context.model[context.appMainTable] = {};
                         context.model[context.appMainTable] = item;
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('clicRuntimeRequestInfok', savefunc);
                        $('#addEditModal_' + uimetacode).modal('show');

                    }
                    else
                    {

                        var endpointurl = "@Model.RuntimeRequestInfo.EndpointCreateNewPath/" + context.appId;
                        if (context.requestInfo != "")
                            endpointurl += "/" + context.requestInfo;

                        $.get(endpointurl, function (response)
                        {
                            context.model = JSON.parse(response.data);

                        }).done(function ()
                        {
                            $('#addEditModalSaveBtn_' + uimetacode).off('click', savefunc);
                            $('#addEditModalSaveBtn_' + uimetacode).off().on('click', savefunc);
                            $('#addEditModal_' + uimetacode).modal('show');

                        });
                    }



                },
                openSubTableModal: function (item, uimetacode, dbtablename)
                {
                    var context = this;

                
                    var saveFunc = function ()
                    {

                        if (context.instanceId === 0)
                        {
                            context.model[context.appMainTable].ApplicationId = context.appId;
                            context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;
                            context.model[context.appMainTable].Properties = context.requestInfo;

                            if (!context.canSave())
                                return;

                            var endpointurl = "@Model.RuntimeRequestInfo.EndpointSaveApplicationPath";

                            $.ajax({
                                url: endpointurl,
                                type: "POST",
                                contentType: "application/json",
                                data: JSON.stringify(context.model),
                                success: function (response)
                                {
                                    context.version = response.version;
                                    context.instanceId = response.id;

                                    context[dbtablename].Version = context.version;
                                    context[dbtablename].ParentId = context.instanceId;
                                    context[dbtablename].TableName = dbtablename;
                                    context[dbtablename].ApplicationId = context.appId;
                                    context[dbtablename].ApplicationViewId = context.applicationViewId;
                                    context[dbtablename].Properties = context.requestInfo;

                                    endpointurl = "@Model.RuntimeRequestInfo.EndpointSaveLinePath";

                                    $.ajax({
                                        url: endpointurl,
                                        type: "POST",
                                        contentType: "application/json",
                                        data: JSON.stringify(context[dbtablename]),
                                        success: function (response)
                                        {
                                             if (context.aftersaveaction == 'GOTOREFERER')
                                            {
                                                 window.location.href = '@Context.Request.Headers["Referer"].ToString()';
                                            }
                                            else if (context.aftersaveaction == 'REFRESH')
                                            {
                                                context.modelSaved = true;
                                                context.getApplication();
                                                setTimeout(function () { context.modelSaved = false; }, 3000);
                                            }
                                            else
                                            {
                                                if (context.aftersaveactionpath != '')
                                                {
                                                    endpointurl = '@Url.Content("~/" + aftersaveactionpath)';
                                                    window.location.href = endpointurl;
                                                }
                                            }

                                        },
                                        error: function (response)
                                        {
                                            raiseErrorModal(response.responseJSON);
                                        }
                                    });
                                },
                                error: function (response)
                                {
                                    raiseErrorModal(response.responseJSON);
                                }
                                });
                        }
                        else
                        {
                            var endpointurl = "@Model.RuntimeRequestInfo.EndpointSaveLinePath";

                            context[dbtablename].Version = context.version;
                            context[dbtablename].ParentId = context.instanceId;
                            context[dbtablename].TableName = dbtablename;
                            context[dbtablename].ApplicationId = context.appId;
                            context[dbtablename].ApplicationViewId = context.applicationViewId;
                            context[dbtablename].Properties = context.requestInfo;

                            $.ajax({
                                url: endpointurl,
                                type: "POST",
                                contentType: "application/json",
                                data: JSON.stringify(context[dbtablename]),
                                success: function (response) {
                                    context.modelSaved = true;
                                    setTimeout(function () { context.modelSaved = false; }, 3000);
                                    context.getPage(dbtablename);
                                },
                                error: function (response) {
                                    raiseErrorModal(response.responseJSON);
                                }
                            });
                        }
                    };


                    if (item) {
                        context[dbtablename] = {};
                        context[dbtablename] = item;
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', saveFunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', saveFunc);
                        $('#addEditModal_' + uimetacode).modal('show');

                    }
                    else {
                        context[dbtablename] = {};
                        $('#addEditModalSaveBtn_' + uimetacode).off('click', saveFunc);
                        $('#addEditModalSaveBtn_' + uimetacode).off().on('click', saveFunc);
                        $('#addEditModal_' + uimetacode).modal('show');
                    }


                },
                deleteTableLine: function (item, dbtablename)
                {
                    var context = this;

                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointDeleteLinePath";

                    var deletelinefunc = function ()
                    {
                        for (var i = 0; i < context.model[dbtablename].length; i++) {
                            var lineitem = context.model[dbtablename][i];
                            if (lineitem.Id > 0 && item.Id > 0 && lineitem.Id === item.Id) {

                                var senddata = { Id: item.Id, ParentId: context.model[context.appMainTable].Id, TableName: dbtablename, ApplicationId: context.appId, ApplicationViewId: context.applicationViewId, Properties: context.requestInfo };

                                $.ajax({
                                    url: endpointurl,
                                    type: "POST",
                                    contentType: "application/json",
                                    data: JSON.stringify(senddata),
                                    success: function (response)
                                    {
                                        context.model[dbtablename].splice(i, 1);
                                        context.modelSaved = true;
                                        setTimeout(function () { context.modelSaved = false; }, 3000);
                                    },
                                    error: function (response) {
                                        raiseErrorModal(response);
                                    }
                                });

                                break;
                            }
                            else {
                                if (item.hasOwnProperty("LocalId") && lineitem.hasOwnProperty("LocalId")) {
                                    if (lineitem.LocalId === item.LocalId) {
                                        context.model[dbtablename].splice(i, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deletelinefunc);

                },
                saveApplication: function ()
                {
                    var context = this;

                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointSaveApplicationPath";

                    context.model[context.appMainTable].ApplicationId = context.appId;
                    context.model[context.appMainTable].ApplicationViewId = context.applicationViewId;
                    context.model[context.appMainTable].Properties = context.requestInfo;

                    if (!context.canSave())
                        return;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(this.model),
                        success: function (response)
                        {
                            if (context.aftersaveaction == 'GOTOREFERER')
                            {
                                 window.location.href = '@Context.Request.Headers["Referer"].ToString()';
                            }
                            else if (context.aftersaveaction == 'REFRESH')
                            {
                                context.version = response.version;
                                context.instanceId = response.id;
                                context.modelSaved = true;
                                context.getApplication();
                                setTimeout(function () { context.modelSaved = false; }, 3000);
                            }
                            else
                            {
                                if (context.aftersaveactionpath != '')
                                {
                                    endpointurl = '@Url.Content("~/" + aftersaveactionpath)';
                                    window.location.href = endpointurl;
                                }
                            }
                        },
                        error: function (response)
                        {
                            raiseErrorModal(response.responseJSON);
                        }
                    });

                },
                onImageChanged: function (event)
                {
                    this.uploadImage(event);
                },
                getPage: function (dbtablename)
                {
                    var context = this;

                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";

                    var objname = "";
                    var ismaintable = false;
                    if (dbtablename)
                    {
                        objname = dbtablename + "_pageInfo";
                    }
                    else
                    {
                        ismaintable = true;
                        objname = "model_pageInfo";
                    }

                    context[objname].applicationViewId = context.applicationViewId;
                    context[objname].properties = context.requestInfo;

                    if (!ismaintable)
                    {
                        context[objname].dataTableDbName = dbtablename;
                        context[objname].parentId = context.instanceId;
                    }
                    else
                    {
                        context[objname].parentId = 0;
                    }

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(context[objname]),
                        success: function (response)
                        {
                            //DATA
                            if (ismaintable)
                            {
                                context.applist = JSON.parse(response.data);

                                //UPDATE CURRENT PAGE INFO
                                context.model_pageInfo = response.currentOperation;
                                if (context.model_pageInfo.filterValues.length === 0)
                                    context.addFilterValue();
                            }
                            else
                            {
                                context.model[dbtablename] = JSON.parse(response.data);
                                context[objname] = response.currentOperation;
                                if (context[objname].filterValues.length === 0)
                                    context.addFilterValue(dbtablename);

                            }
                        }
                    });
                },
                exportToExcel: function ()
                {
                    var context = this;
                    var args =  { applicationId: @Model.ApplicationInfo.Id, applicationViewId: @Model.Id, maxCount: 0, pageSize: 20000, pageNumber: 0, filterValues: [], skipPaging:true }
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(args),
                        success: function (response) {
                            var data = JSON.parse(response.data);
                            alasql.promise('SELECT * INTO XLSX("download.xlsx",{headers:true}) FROM ?', [data])
                                .then(function (data) {
                                    console.log('Data saved');
                                }).catch(function (err) {
                                    console.log('Error:', err);
                                });
                        }
                    });
                },
                deleteApplication: function (item, successcallback) {
                    var context = this;
                   var endpointurl = "@Model.RuntimeRequestInfo.EndpointDeleteApplicationPath";

                    var deleteapp = function ()
                    {
                        if (!item.ApplicationId)
                            item.ApplicationId = context.appId;

                        //If the line comes from a child application, don't set the view id
                        //The server will authorize athorize on application level instead.
                        if (item.ApplicationId === context.appId)
                            item.ApplicationViewId = context.applicationViewId;

                        item.Properties = context.requestInfo;

                        $.ajax({
                            url: endpointurl,
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(item),
                            success: function (response)
                            {
                                if (successcallback)
                                    successcallback();
                                else
                                    context.getPage();
                            },
                            error: function (response)
                            {
                                raiseErrorModal(response.responseJSON);
                            }
                        });
                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);
                },
                getApplication: function ()
                {
                    var context = this;
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetApplicationPath/" + context.appId + "/" + context.applicationViewId + "/" + context.instanceId;
                    if (context.requestInfo != "")
                        endpointurl += "/" + context.requestInfo;
                    $.get(endpointurl, function (response)
                    {
                        var maindata = JSON.parse(response.data);
                        context.model[context.appMainTable] = maindata[context.appMainTable];

                    }).done(function () {

                        @foreach (var s in subtableconfig)
                        {
                            <text>
                            context.getPage('@s.TableName');
                            </text>
                        }

                        context.$forceUpdate();
                     });
                },
                createNewApplication: function ()
                {
                    var context = this;
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointCreateNewPath/" + context.appId;
                    $.get(endpointurl, function (response) {
                        context.model = JSON.parse(response.data);
                    }).done(function () {
                        //
                    });
                },
                getDomain: function (domainname, query, donefunc)
                {
                     //USED BY THE SEARCHBOX UICONTROL
                    var context = this;
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetDomainPath";
                    var senddata = { "id": context.instanceId, "version": context.version, "applicationId": context.appId, "applicationViewId": context.applicationViewId, "requestInfo": "", "domainName": domainname, "query": query };
                    if (context.requestInfo != "")
                        senddata.requestInfo=context.requestInfo;

                    $.ajax({
                        url: endpointurl,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(senddata),
                        success: function (response) {
                            donefunc(response);
                        }
                    });


                },
                isFirstPage: function (dbtablename)
                {
                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    var pageno = this[objname].pageNumber;

                    return (pageno <= 0);
                },
                isLastPage: function (dbtablename)
                {
                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    var pageno = this[objname].pageNumber;
                    var pagesize = this[objname].pageSize;
                    var maxcount = this[objname].maxCount;

                    return ((pageno + 1) * pagesize) >= maxcount;
                },
                sortBycolumn: function (s, dbtablename)
                {
                    var context = this;
                    var objname = "";
                    if (dbtablename)
                    {
                        objname = dbtablename + "_pageInfo";
                    }
                    else
                    {
                        objname = "model_pageInfo";
                    }

                    //if s == current sort, reverse
                    if (s === this[objname].sortColumns)
                    {
                        this[objname].sortDirection = this[objname].sortDirection === 'ASC' ? 'DESC' : 'ASC';
                    }

                    this[objname].sortColumns = s;
                    @if (!Settings.Value.UIControlsEnableVueListSorting){
                        <text>context.getPage(dbtablename);</text>
                    }
                },
                nextPage: function (dbtablename)
                {
                    var context = this;

                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    context[objname].pageNumber++;
                    context.getPage(dbtablename);
                },
                prevPage: function (dbtablename) {
                    var context = this;

                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    context[objname].pageNumber--;
                    if (context[objname].pageNumber < 0)
                        context[objname].pageNumber = 0;
                    context.getPage(dbtablename);
                },
                runFilter: function (dbtablename)
                {
                    var context = this;

                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    if (context[objname].filterValues.length > 0)
                        context.getPage(dbtablename);
                },
                addFilterValue: function (dbtablename)
                {
                    var context = this;

                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    context[objname].filterValues.push({ "name": "", "value": "" });
                },
                deleteFilterValue: function (item, dbtablename)
                {
                    var context = this;

                    var objname = "";
                    if (dbtablename)
                        objname = dbtablename + "_pageInfo";
                    else
                        objname = "model_pageInfo";

                    for (var i = 0; i < context[objname].filterValues.length; i++) {
                        if (context[objname].filterValues[i].name === item.name) {
                            context[objname].filterValues.splice(i, 1);
                            context.getPage(dbtablename);
                            break;

                        }
                    }
                }

            },
            computed: {

                @if (Settings.Value.UIControlsEnableVueListSorting)
                {
                        <text>
                        sortedAppTable: function() {
                                return this.applist.sort((a, b) => {
                                    let modifier = 1;
                                    if (this.model_pageInfo.sortDirection === 'DESC') modifier = -1;
                                    if (a[this.model_pageInfo.sortColumns] < b[this.model_pageInfo.sortColumns]) return -1 * modifier;
                                    if (a[this.model_pageInfo.sortColumns] > b[this.model_pageInfo.sortColumns]) return 1 * modifier;
                                    return 0;
                                });
                         }
                        </text>

                        @foreach (var s in subtableconfig)
                        {
                            <text>
                            ,sorted_@s.TableName: function()
                            {
                                var dbtablename = "@s.TableName";
                                var lineobjectname = "@s.TableName" + "_pageInfo";
                                return this.model[dbtablename].sort((a, b) => {
                                    let modifier = 1;
                                    if (this[lineobjectname].sortDirection === 'DESC') modifier = -1;
                                    if (a[this[lineobjectname].sortColumns] < b[this[lineobjectname].sortColumns]) return -1 * modifier;
                                    if (a[this[lineobjectname].sortColumns] > b[this[lineobjectname].sortColumns]) return 1 * modifier;
                                    return 0;
                                });
                            }
                            </text>
                        }
                }
                else
                {
                     <text>
                        sortedAppTable: function ()
                        {
                            return this.applist;
                        }
                     </text>
                     @foreach (var s in subtableconfig)
                    {
                        <text>
                        ,sorted_@s.TableName: function()
                        {
                            var dbtablename = "@s.TableName";
                            return this.model[dbtablename];
                        }
                        </text>
                    }
                }
             },
            mounted: function ()
            {
                var context = this;

                @if (Model.IsApplicationListView())
                {
                    <text>
                        context.getPage();
                    </text>

                }
                else if (Model.IsApplicationInputView() && Model.RuntimeRequestInfo.Id > 0)
                {
                    <text>
                        context.getApplication();
                    </text>
                }
                else if (Model.IsApplicationInputView() && Model.RuntimeRequestInfo.Id == 0)
                {
                    <text>
                        context.createNewApplication();
                    </text>

                }

            }
        });

        */


</script>

