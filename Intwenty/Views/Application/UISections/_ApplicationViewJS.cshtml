@model Intwenty.Model.IntwentyView

@{
    var subtables = new List<string>();
    foreach (var sect in Model.VerticalSections){
        if (sect.ListView!=null)
        {
            if (!string.IsNullOrEmpty(sect.ListView.DbTableName))
            {
                subtables.Add(sect.ListView.DbTableName);
            }
        }
    }
   
}

<script>
        
        let app = getBareaApp();

        const content = {
            data:
            {
                 baseurl: "@Model.RuntimeRequestInfo.EndpointBasePath"
                ,requestInfo: "@Model.RuntimeRequestInfo.RequestInfo"
                ,appMainTable: "@Model.DbTableName"
                ,appId: @Model.Id
                ,applicationViewId: @Model.Id
                ,instanceId: @Model.RuntimeRequestInfo.Id
                ,version:1
                ,applist: []
                ,model: { @Model.DbTableName: {} @foreach (var st in subtables){<text>,@st:[]</text>}}
                ,modelSaved: false
                ,idgen: -1
            },
            methods:
            {
              
               getApplication: function ()
               {
                    var context = this;
                    var rootdata = this.getData();
                    var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetApplicationPath/" + rootdata.appId + "/" + rootdata.applicationViewId + "/" + rootdata.instanceId;
                    if (rootdata.requestInfo != "")
                        endpointurl += "/" + rootdata.requestInfo;

                    fetch(endpointurl, {
                         method: "GET"
                        ,headers:{contentType: "application/json"}
                     })
                    .then(response => response.json())  // Parse response as JSON
                    .then(response=>{
                        let fetched_data = JSON.parse(response.data);
                        let current =  rootdata.model[rootdata.appMainTable];
                        rootdata.model[rootdata.appMainTable] = fetched_data[rootdata.appMainTable];
                     })
                     .then(response=>{
                            @foreach (var s in subtables)
                        {
                            <text>
                               context.getChildTable('@s');
                            </text>
                         }
                     });

                },
                deleteApplication: function (event,element,item) {

                   let context = this;
                   let data = this.getData();
                   let endpointurl = "@Model.RuntimeRequestInfo.EndpointDeleteApplicationPath";

                    var deleteapp = function ()
                    {
                        if (!item.ApplicationId)
                            item.ApplicationId = context.appId;

                        //If the line comes from a child application, don't set the view id
                        //The server will authorize athorize on application level instead.
                        if (item.ApplicationId === data.appId)
                            item.ApplicationViewId = data.applicationViewId;

                        item.Properties = data.requestInfo;

                        const message = JSON.stringify(item);

                        fetch(endpointurl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: message
                        })
                        .then(response => {
                            let t =response;
                            context.getMainTableListPage();

                        })
                        .catch(error => console.error("Error:", error));  // Handle any errors

                    };

                    raiseYesNoModal("Delete ?", "This record will be deleted, are you sure ?", deleteapp);

                },
                getMainTableListPage: function () 
                {
                        var context = app.getData();

                        var endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";

                        context.model_pageInfo.applicationViewId = context.applicationViewId;
                        context.model_pageInfo.properties = context.requestInfo;
                        context.model_pageInfo.parentId = 0;
                        const requestData = JSON.stringify(context.model_pageInfo);

                        // Create and send the request using Fetch API
                        fetch(endpointurl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: requestData
                        })
                            .then(response => response.json())  // Parse response as JSON
                            .then(response => {
                         
                                context.applist = response.data ? JSON.parse(response.data) : [];
                                context.model_pageInfo = response.currentOperation;
                                if (context.model_pageInfo.filterValues.length === 0) 
                                {
                                    this.addMainTableFilterValue();
                                }
                            })
                            .catch(error => console.error("Error:", error));  // Handle any errors
                },
                getChildTable: function (tablename)
                {
                    let context = app.getData();
                    let endpointurl = "@Model.RuntimeRequestInfo.EndpointGetPagedListPath";
                    let infoobject = tablename + "_pageInfo";

                    context[infoobject].applicationViewId = context.applicationViewId;
                    context[infoobject].properties = context.requestInfo;
                    context[infoobject].dataTableDbName = dbtablename;
                    context[infoobject].parentId = context.instanceId;

                    const requestData = JSON.stringify( context[infoobject]);

                     fetch(endpointurl, {
                         method: 'POST',
                          headers: {
                            'Content-Type': 'application/json'
                         },
                         body: requestData
                      })
                      .then(response => response.json())  
                      .then(response => {

                        context.model[tablename] = JSON.parse(response.data);
                        context[infoobject] = response.currentOperation;
                       
                      })
                      .catch(error => console.error("Error:", error));  
                }
               
            },
            computed:{
               
            },
            mounted: function ()
            {
                @if (Model.ViewType== IntwentyViewFunction.List)
                {
                    <text>
                           this.getMainTableListPage();
                    </text>

                }
                else if (Model.ViewType == IntwentyViewFunction.Edit && Model.RuntimeRequestInfo.Id > 0)
                {
                    <text>
                        this.getApplication();
                    </text>
                }
                else if (Model.ViewType == IntwentyViewFunction.Create && Model.RuntimeRequestInfo.Id == 0)
                {
                    <text>
                         this.createNewApplication();
                    </text>

                }
            }
            
        };

        app.mount("app", content);


   
</script>

